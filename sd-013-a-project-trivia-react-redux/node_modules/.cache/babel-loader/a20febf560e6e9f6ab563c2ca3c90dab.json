{"ast":null,"code":"var _jsxFileName = \"/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/pages/Game.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport { getQuestions, updateScore } from '../redux/actions';\nimport GameBoard from '../components/GameBoard';\nimport './Game.css';\nconst basePoints = 10;\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      redirect: false,\n      qIndex: 0\n    };\n    this.handleSelect = this.handleSelect.bind(this);\n    this.handleNext = this.handleNext.bind(this);\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          getQs = _this$props.getQs,\n          token = _this$props.token;\n    getQs(token);\n  }\n\n  handleNext() {\n    const qIndex = this.state.qIndex;\n    const questions = this.props.questions;\n\n    if (qIndex < questions.length - 1) {\n      this.setState(state => ({\n        qIndex: state.qIndex + 1\n      }));\n      document.getElementsByName('options').forEach(opt => {\n        opt.disabled = false;\n        opt.className = '';\n      });\n      document.querySelector('.btn-next').classList.add('invisible');\n    } else {\n      this.setState({\n        redirect: true\n      });\n    }\n  }\n\n  handleSelect(question, target, seconds) {\n    const updtScore = this.props.updtScore;\n    const correctOpt = question.correct_answer,\n          difficulty = question.difficulty;\n    document.getElementsByName('options').forEach(opt => {\n      opt.disabled = true;\n      const className = opt.value === correctOpt ? 'game-correct' : 'game-incorrect';\n      opt.classList.add(className);\n    });\n    document.querySelector('.btn-next').classList.remove('invisible');\n\n    if (target.value === correctOpt) {\n      const lsData = JSON.parse(localStorage.state);\n      const diff = ['batata', 'easy', 'medium', 'hard'];\n      const diffMultiplier = diff.indexOf(difficulty);\n      lsData.player.assertions += 1;\n      lsData.player.score += basePoints + seconds * diffMultiplier;\n      updtScore({\n        score: lsData.player.score,\n        assertions: lsData.player.assertions\n      });\n      localStorage.state = JSON.stringify(lsData);\n    }\n  }\n\n  render() {\n    const _this$state = this.state,\n          redirect = _this$state.redirect,\n          qIndex = _this$state.qIndex;\n    const questions = this.props.questions;\n    if (questions.length < 1) return React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"Loading...\");\n    if (redirect) return React.createElement(Redirect, {\n      to: \"/feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(GameBoard, {\n      question: questions[qIndex],\n      onSelect: this.handleSelect,\n      onNext: this.handleNext,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  token: state.userReducer.token,\n  questions: state.gameReducer.questions\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getQs: payload => dispatch(getQuestions(payload)),\n  updtScore: payload => dispatch(updateScore(payload))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\nGame.propTypes = {\n  getQs: PropTypes.func.isRequired,\n  updtScore: PropTypes.func.isRequired,\n  token: PropTypes.string.isRequired,\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired\n};","map":{"version":3,"sources":["/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/pages/Game.jsx"],"names":["React","Component","PropTypes","Redirect","connect","Header","getQuestions","updateScore","GameBoard","basePoints","Game","constructor","props","state","redirect","qIndex","handleSelect","bind","handleNext","componentDidMount","getQs","token","questions","length","setState","document","getElementsByName","forEach","opt","disabled","className","querySelector","classList","add","question","target","seconds","updtScore","correctOpt","correct_answer","difficulty","value","remove","lsData","JSON","parse","localStorage","diff","diffMultiplier","indexOf","player","assertions","score","stringify","render","mapStateToProps","userReducer","gameReducer","mapDispatchToProps","dispatch","payload","propTypes","func","isRequired","string","arrayOf","object"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport { getQuestions, updateScore } from '../redux/actions';\nimport GameBoard from '../components/GameBoard';\nimport './Game.css';\n\nconst basePoints = 10;\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      redirect: false,\n      qIndex: 0,\n    };\n\n    this.handleSelect = this.handleSelect.bind(this);\n    this.handleNext = this.handleNext.bind(this);\n  }\n\n  componentDidMount() {\n    const { getQs, token } = this.props;\n    getQs(token);\n  }\n\n  handleNext() {\n    const { qIndex } = this.state;\n    const { questions } = this.props;\n    if (qIndex < questions.length - 1) {\n      this.setState((state) => ({ qIndex: state.qIndex + 1 }));\n      document.getElementsByName('options').forEach((opt) => {\n        opt.disabled = false;\n        opt.className = '';\n      });\n      document.querySelector('.btn-next').classList.add('invisible');\n    } else {\n      this.setState({ redirect: true });\n    }\n  }\n\n  handleSelect(question, target, seconds) {\n    const { updtScore } = this.props;\n    const { correct_answer: correctOpt, difficulty } = question;\n    document.getElementsByName('options').forEach((opt) => {\n      opt.disabled = true;\n      const className = opt.value === correctOpt ? 'game-correct' : 'game-incorrect';\n      opt.classList.add(className);\n    });\n    document.querySelector('.btn-next').classList.remove('invisible');\n\n    if (target.value === correctOpt) {\n      const lsData = JSON.parse(localStorage.state);\n      const diff = ['batata', 'easy', 'medium', 'hard'];\n      const diffMultiplier = diff.indexOf(difficulty);\n      lsData.player.assertions += 1;\n      lsData.player.score += basePoints + (seconds * diffMultiplier);\n      updtScore({ score: lsData.player.score, assertions: lsData.player.assertions });\n      localStorage.state = JSON.stringify(lsData);\n    }\n  }\n\n  render() {\n    const { redirect, qIndex } = this.state;\n    const { questions } = this.props;\n    if (questions.length < 1) return <h3>Loading...</h3>;\n    if (redirect) return <Redirect to=\"/feedback\" />;\n    return (\n      <div>\n        <Header />\n        <GameBoard\n          question={ questions[qIndex] }\n          onSelect={ this.handleSelect }\n          onNext={ this.handleNext }\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  token: state.userReducer.token,\n  questions: state.gameReducer.questions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getQs: (payload) => dispatch(getQuestions(payload)),\n  updtScore: (payload) => dispatch(updateScore(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n\nGame.propTypes = {\n  getQs: PropTypes.func.isRequired,\n  updtScore: PropTypes.func.isRequired,\n  token: PropTypes.string.isRequired,\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}