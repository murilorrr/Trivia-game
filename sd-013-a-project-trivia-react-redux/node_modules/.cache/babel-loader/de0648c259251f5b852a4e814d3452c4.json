{"ast":null,"code":"var _jsxFileName = \"/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/pages/Login.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport validateLogin from '../redux/actions/validateLogin';\nimport { putTokenInLocalStorage } from '../helpers/servicesAPI';\nconst regexEmail = /^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i;\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.submitLogin = this.submitLogin.bind(this);\n    this.state = {\n      nome: '',\n      email: ''\n    };\n  }\n\n  handleChange({\n    target: {\n      name,\n      value\n    }\n  }) {\n    this.setState({\n      [name]: value\n    });\n  }\n\n  submitLogin() {\n    const dispatchValidateLogin = this.props.dispatchValidateLogin;\n    const _this$state = this.state,\n          nome = _this$state.nome,\n          email = _this$state.email;\n    putTokenInLocalStorage();\n    dispatchValidateLogin({\n      nome,\n      email\n    });\n    const history = this.props.history;\n    history.push('/settings');\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          nome = _this$state2.nome,\n          email = _this$state2.email;\n    const statusButton = !(regexEmail.test(email) && nome.length > 0);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"name-input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"Nome:\", React.createElement(\"input\", {\n      type: \"text\",\n      id: \"name-input\",\n      \"data-testid\": \"input-player-name\",\n      name: \"nome\",\n      value: nome,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      htmlFor: \"email-input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Email:\", React.createElement(\"input\", {\n      type: \"text\",\n      id: \"email-input\",\n      \"data-testid\": \"input-gravatar-email\",\n      name: \"email\",\n      value: email,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      disabled: statusButton,\n      type: \"button\",\n      \"data-testid\": \"btn-play\",\n      onClick: this.submitLogin,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Jogar\"));\n  }\n\n}\n\nLogin.propTypes = {\n  dispatchValidateLogin: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired\n  }).isRequired\n};\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchValidateLogin: value => dispatch(validateLogin(value))\n});\n\nexport default connect(null, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/pages/Login.js"],"names":["React","connect","PropTypes","validateLogin","putTokenInLocalStorage","regexEmail","Login","Component","constructor","props","handleChange","bind","submitLogin","state","nome","email","target","name","value","setState","dispatchValidateLogin","history","push","render","statusButton","test","length","propTypes","func","isRequired","shape","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport validateLogin from '../redux/actions/validateLogin';\nimport { putTokenInLocalStorage } from '../helpers/servicesAPI';\n\nconst regexEmail = /^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i;\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.submitLogin = this.submitLogin.bind(this);\n\n    this.state = {\n      nome: '',\n      email: '',\n    };\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({ [name]: value });\n  }\n\n  submitLogin() {\n    const { dispatchValidateLogin } = this.props;\n    const { nome, email } = this.state;\n    putTokenInLocalStorage();\n    dispatchValidateLogin({ nome, email });\n    const { history } = this.props;\n    history.push('/settings');\n  }\n\n  render() {\n    const { nome, email } = this.state;\n    const statusButton = !(regexEmail.test(email) && nome.length > 0);\n    return (\n      <div>\n        <label htmlFor=\"name-input\">\n          Nome:\n          <input\n            type=\"text\"\n            id=\"name-input\"\n            data-testid=\"input-player-name\"\n            name=\"nome\"\n            value={ nome }\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"email-input\">\n          Email:\n          <input\n            type=\"text\"\n            id=\"email-input\"\n            data-testid=\"input-gravatar-email\"\n            name=\"email\"\n            value={ email }\n            onChange={ this.handleChange }\n          />\n        </label>\n        <button\n          disabled={ statusButton }\n          type=\"button\"\n          data-testid=\"btn-play\"\n          onClick={ this.submitLogin }\n        >\n          Jogar\n        </button>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  dispatchValidateLogin: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchValidateLogin: (value) => dispatch(validateLogin(value)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n"]},"metadata":{},"sourceType":"module"}