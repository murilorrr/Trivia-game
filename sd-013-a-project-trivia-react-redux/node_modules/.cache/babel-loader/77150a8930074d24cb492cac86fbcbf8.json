{"ast":null,"code":"var _jsxFileName = \"/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/pages/Gamepage.jsx\";\n// React\nimport React from 'react'; // PropTypes\n\nimport PropTypes from 'prop-types'; // Redux\n\nimport { connect } from 'react-redux';\nimport { setAnswers, setAssertions, toggleTimer, setScore } from '../redux/actions/game';\nimport { pressQuestionBtn } from '../redux/actions/pressBtn'; // Children\n\nimport HeaderGame from '../components/HeaderGame';\nimport NextBtn from '../components/NextBtn';\nimport GameTimer from '../components/GameTimer';\nimport GameAnswers from '../components/GameAnswers'; // Helpers\n\nimport shuffleAnswers from '../helpers/shuffleAnswers'; // Styles\n\nimport '../styles/Gamepage.css';\n\nclass Gamepage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.setAnswers = this.setAnswers.bind(this);\n    this.enableNextBtn = this.enableNextBtn.bind(this);\n    this.setAssertions = this.setAssertions.bind(this);\n    this.addStyles = this.addStyles.bind(this);\n    this.answered = this.answered.bind(this);\n    this.sendScoreToLocalStorage = this.sendScoreToLocalStorage.bind(this);\n  }\n\n  componentDidMount() {\n    const toggleTimerDispatch = this.props.toggleTimerDispatch;\n    this.setAnswers();\n    toggleTimerDispatch();\n  }\n  /* As funções a seguir estão relacionadas com os eventos das respostas */\n\n\n  setAnswers() {\n    const _this$props = this.props,\n          game = _this$props.game,\n          questionNumber = _this$props.questionNumber,\n          setAnswersDispatch = _this$props.setAnswersDispatch;\n    shuffleAnswers(game, questionNumber, setAnswersDispatch, this.answered); // Salva as respostas na chave answers do estado global\n  }\n\n  setAssertions(target) {\n    const setAssertionsDispatch = this.props.setAssertionsDispatch; // Acertos\n\n    let assertions = 0;\n\n    if (target.id === 'correct-answer') {\n      assertions += 1;\n      console.log('Alternativa correta!');\n    } else {\n      console.log('Alternativa incorreta.');\n    }\n\n    setAssertionsDispatch(assertions);\n  }\n\n  enableNextBtn() {\n    const enableNextBtnDispatch = this.props.enableNextBtnDispatch;\n    enableNextBtnDispatch();\n  }\n\n  addStyles() {\n    // Adiciona estilo para a alternativa correta\n    const correta = document.querySelector('#correct-answer');\n    correta.classList.add('correct-highlight'); // Disabilita botões de resposta\n\n    correta.disabled = true; // Adiciona estilo para as alternativas incorretas\n\n    const incorretas = document.querySelectorAll('.incorrect-answer');\n    incorretas.forEach(el => {\n      el.classList.add('incorrect-highlight'); // Disabilita botões de resposta\n\n      el.disabled = true;\n    });\n  }\n\n  sendScoreToLocalStorage(target) {\n    if (target.id === 'correct-answer') {\n      // Obtendo dados\n      const _this$props2 = this.props,\n            timer = _this$props2.timer,\n            scoreDispatch = _this$props2.scoreDispatch; // = this.state utilizar o timer do state;\n\n      const _this$props3 = this.props,\n            game = _this$props3.game,\n            questionNumber = _this$props3.questionNumber;\n      const difficulty = game[questionNumber].difficulty; // Utilizando variaveis de controle\n\n      const obj = {\n        hard: 3,\n        medium: 2,\n        easy: 1\n      };\n      let valor;\n\n      switch (difficulty) {\n        case 'hard':\n          valor = obj.hard;\n          break;\n\n        case 'medium':\n          valor = obj.medium;\n          break;\n\n        case 'easy':\n          valor = obj.easy;\n          break;\n\n        default:\n      } // Obtendo dados do localStorage\n\n\n      const state = JSON.parse(localStorage.getItem('state'));\n      const defaultReward = 10;\n      state.player.score += defaultReward + valor * timer; // devolvendo os dados para o localStorage\n\n      localStorage.setItem('state', JSON.stringify(state));\n      scoreDispatch();\n    }\n  }\n\n  answered({\n    target\n  }) {\n    const toggleTimerDispatch = this.props.toggleTimerDispatch; // Desligar timer\n\n    toggleTimerDispatch(); // Estilos\n\n    this.addStyles(); // Atualizar pontuação\n\n    this.sendScoreToLocalStorage(target);\n    this.setAssertions(target); // Habilitar nova pergunta\n\n    this.enableNextBtn();\n  }\n\n  render() {\n    const _this$props4 = this.props,\n          game = _this$props4.game,\n          questionNumber = _this$props4.questionNumber;\n    const _game$questionNumber = game[questionNumber],\n          category = _game$questionNumber.category,\n          question = _game$questionNumber.question;\n    return React.createElement(\"section\", {\n      className: \"Gamepage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(HeaderGame, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(GameTimer, {\n      addStyles: this.addStyles,\n      enableNextBtn: this.enableNextBtn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, category), React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, question), React.createElement(GameAnswers, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    })), React.createElement(NextBtn, {\n      setAnswers: this.setAnswers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }));\n  }\n\n}\n\nGamepage.propTypes = {\n  game: PropTypes.arrayOf(PropTypes.object).isRequired,\n  // Array de perguntas\n  questionNumber: PropTypes.number.isRequired,\n  // Número da pergunta\n  timer: PropTypes.number.isRequired,\n  // Número do tempo\n  setAnswersDispatch: PropTypes.func.isRequired,\n  // Salvar respostas\n  setAssertionsDispatch: PropTypes.func.isRequired,\n  // Salvar pontuação\n  enableNextBtnDispatch: PropTypes.func.isRequired,\n  // Habilitar nova pergunta\n  toggleTimerDispatch: PropTypes.func.isRequired,\n  // Ligar/Desligar timer\n  scoreDispatch: PropTypes.func.isRequired // Ligar/Desligar timer\n\n};\n\nconst mapStateToProps = state => ({\n  game: state.game.game,\n  questionNumber: state.game.questionNumber,\n  timer: state.game.timer\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setAnswersDispatch: payload => dispatch(setAnswers(payload)),\n  setAssertionsDispatch: payload => dispatch(setAssertions(payload)),\n  enableNextBtnDispatch: payload => dispatch(pressQuestionBtn(payload)),\n  toggleTimerDispatch: () => dispatch(toggleTimer()),\n  scoreDispatch: payload => dispatch(setScore(payload))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Gamepage);","map":{"version":3,"sources":["/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/pages/Gamepage.jsx"],"names":["React","PropTypes","connect","setAnswers","setAssertions","toggleTimer","setScore","pressQuestionBtn","HeaderGame","NextBtn","GameTimer","GameAnswers","shuffleAnswers","Gamepage","Component","constructor","props","bind","enableNextBtn","addStyles","answered","sendScoreToLocalStorage","componentDidMount","toggleTimerDispatch","game","questionNumber","setAnswersDispatch","target","setAssertionsDispatch","assertions","id","console","log","enableNextBtnDispatch","correta","document","querySelector","classList","add","disabled","incorretas","querySelectorAll","forEach","el","timer","scoreDispatch","difficulty","obj","hard","medium","easy","valor","state","JSON","parse","localStorage","getItem","defaultReward","player","score","setItem","stringify","render","category","question","propTypes","arrayOf","object","isRequired","number","func","mapStateToProps","mapDispatchToProps","dispatch","payload"],"mappings":"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","sourcesContent":["// React\nimport React from 'react';\n\n// PropTypes\nimport PropTypes from 'prop-types';\n\n// Redux\nimport { connect } from 'react-redux';\nimport { setAnswers, setAssertions,\n  toggleTimer, setScore } from '../redux/actions/game';\nimport { pressQuestionBtn } from '../redux/actions/pressBtn';\n\n// Children\nimport HeaderGame from '../components/HeaderGame';\nimport NextBtn from '../components/NextBtn';\nimport GameTimer from '../components/GameTimer';\nimport GameAnswers from '../components/GameAnswers';\n\n// Helpers\nimport shuffleAnswers from '../helpers/shuffleAnswers';\n\n// Styles\nimport '../styles/Gamepage.css';\n\nclass Gamepage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setAnswers = this.setAnswers.bind(this);\n    this.enableNextBtn = this.enableNextBtn.bind(this);\n    this.setAssertions = this.setAssertions.bind(this);\n    this.addStyles = this.addStyles.bind(this);\n    this.answered = this.answered.bind(this);\n    this.sendScoreToLocalStorage = this.sendScoreToLocalStorage.bind(this);\n  }\n\n  componentDidMount() {\n    const { toggleTimerDispatch } = this.props;\n    this.setAnswers();\n    toggleTimerDispatch();\n  }\n\n  /* As funções a seguir estão relacionadas com os eventos das respostas */\n  setAnswers() {\n    const {\n      game,\n      questionNumber,\n      setAnswersDispatch,\n    } = this.props;\n\n    shuffleAnswers(\n      game,\n      questionNumber,\n      setAnswersDispatch,\n      this.answered,\n    ); // Salva as respostas na chave answers do estado global\n  }\n\n  setAssertions(target) {\n    const { setAssertionsDispatch } = this.props;\n    // Acertos\n    let assertions = 0;\n\n    if (target.id === 'correct-answer') {\n      assertions += 1;\n      console.log('Alternativa correta!');\n    } else {\n      console.log('Alternativa incorreta.');\n    }\n\n    setAssertionsDispatch(assertions);\n  }\n\n  enableNextBtn() {\n    const { enableNextBtnDispatch } = this.props;\n    enableNextBtnDispatch();\n  }\n\n  addStyles() {\n    // Adiciona estilo para a alternativa correta\n    const correta = document.querySelector('#correct-answer');\n    correta.classList.add('correct-highlight');\n\n    // Disabilita botões de resposta\n    correta.disabled = true;\n\n    // Adiciona estilo para as alternativas incorretas\n    const incorretas = document.querySelectorAll('.incorrect-answer');\n    incorretas.forEach((el) => {\n      el.classList.add('incorrect-highlight');\n\n      // Disabilita botões de resposta\n      el.disabled = true;\n    });\n  }\n\n  sendScoreToLocalStorage(target) {\n    if (target.id === 'correct-answer') {\n      // Obtendo dados\n      const { timer, scoreDispatch } = this.props;\n      // = this.state utilizar o timer do state;\n      const { game, questionNumber } = this.props;\n      const { difficulty } = game[questionNumber];\n      // Utilizando variaveis de controle\n      const obj = { hard: 3, medium: 2, easy: 1 };\n      let valor;\n      switch (difficulty) {\n      case 'hard':\n        valor = obj.hard;\n        break;\n      case 'medium':\n        valor = obj.medium;\n        break;\n      case 'easy':\n        valor = obj.easy;\n        break;\n      default:\n      }\n      // Obtendo dados do localStorage\n      const state = JSON.parse(localStorage.getItem('state'));\n      const defaultReward = 10;\n      state.player.score += defaultReward + valor * timer;\n      // devolvendo os dados para o localStorage\n      localStorage.setItem('state', JSON.stringify(state));\n      scoreDispatch();\n    }\n  }\n\n  answered({ target }) {\n    const { toggleTimerDispatch } = this.props;\n    // Desligar timer\n    toggleTimerDispatch();\n\n    // Estilos\n    this.addStyles();\n\n    // Atualizar pontuação\n    this.sendScoreToLocalStorage(target);\n    this.setAssertions(target);\n\n    // Habilitar nova pergunta\n    this.enableNextBtn();\n  }\n\n  render() {\n    const { game, questionNumber } = this.props;\n    const { category, question } = game[questionNumber];\n\n    return (\n      <section className=\"Gamepage\">\n        <HeaderGame />\n        <GameTimer\n          addStyles={ this.addStyles }\n          enableNextBtn={ this.enableNextBtn }\n        />\n        <div>\n          <h3 data-testid=\"question-category\">\n            { category }\n          </h3>\n          <p data-testid=\"question-text\">\n            { question }\n          </p>\n          <GameAnswers />\n        </div>\n        <NextBtn setAnswers={ this.setAnswers } />\n      </section>\n    );\n  }\n}\n\nGamepage.propTypes = {\n  game: PropTypes.arrayOf(PropTypes.object).isRequired, // Array de perguntas\n  questionNumber: PropTypes.number.isRequired, // Número da pergunta\n  timer: PropTypes.number.isRequired, // Número do tempo\n  setAnswersDispatch: PropTypes.func.isRequired, // Salvar respostas\n  setAssertionsDispatch: PropTypes.func.isRequired, // Salvar pontuação\n  enableNextBtnDispatch: PropTypes.func.isRequired, // Habilitar nova pergunta\n  toggleTimerDispatch: PropTypes.func.isRequired, // Ligar/Desligar timer\n  scoreDispatch: PropTypes.func.isRequired, // Ligar/Desligar timer\n};\n\nconst mapStateToProps = (state) => ({\n  game: state.game.game,\n  questionNumber: state.game.questionNumber,\n  timer: state.game.timer,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setAnswersDispatch: (payload) => dispatch(setAnswers(payload)),\n  setAssertionsDispatch: (payload) => dispatch(setAssertions(payload)),\n  enableNextBtnDispatch: (payload) => dispatch(pressQuestionBtn(payload)),\n  toggleTimerDispatch: () => dispatch(toggleTimer()),\n  scoreDispatch: (payload) => dispatch(setScore(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Gamepage);\n"]},"metadata":{},"sourceType":"module"}