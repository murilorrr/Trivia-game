{"ast":null,"code":"import _objectSpread from \"/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { fetchQuestions, fetchToken } from '../../services/API';\nexport const FETCHING_TOKEN = 'FETCHING_TOKEN';\nexport const REGISTER_USER = 'REGISTER_USER';\nexport const SAVE_TOKEN = 'SAVE_TOKEN';\nexport const SAVE_ERROR_TOKEN = 'SAVE_ERROR_TOKEN';\nexport const RESET_GAME_STATE = 'RESET_GAME_STATE';\nexport const FETCHING_QUESTIONS = 'FETCHING_QUESTIONS';\nexport const TOKEN_EXPIRED = 'TOKEN_EXPIRED';\nexport const SAVE_QUESTIONS = 'SAVE_QUESTIONS';\nexport const SAVE_ERROR_QUESTIONS = 'SAVE_ERROR_QUESTIONS';\nexport const UPDATE_SCORE = 'UPDATE_SCORE';\nexport const UPDATE_RANKING = 'UPDATE_RANKING';\nexport const isFetchingToken = () => ({\n  type: FETCHING_TOKEN\n});\nexport const registerUser = payload => ({\n  type: REGISTER_USER,\n  payload\n});\nexport const saveToken = payload => ({\n  type: SAVE_TOKEN,\n  payload\n});\nexport const saveErrorToken = payload => ({\n  type: SAVE_ERROR_TOKEN,\n  payload\n});\nexport const resetGameState = () => ({\n  type: RESET_GAME_STATE\n});\nexport const isFetchingQuestions = () => ({\n  type: FETCHING_QUESTIONS\n});\nexport const tokenExpired = () => ({\n  type: TOKEN_EXPIRED\n});\nexport const saveQuestions = payload => ({\n  type: SAVE_QUESTIONS,\n  payload\n});\nexport const saveErrorQuestions = payload => ({\n  type: SAVE_ERROR_QUESTIONS,\n  payload\n});\nexport const updateScore = payload => ({\n  type: UPDATE_SCORE,\n  payload\n});\nexport const updateRanking = payload => ({\n  type: UPDATE_RANKING,\n  payload\n});\nexport const getToken = userInfo => async dispatch => {\n  dispatch(resetGameState());\n  dispatch(registerUser(userInfo));\n  const lsData = JSON.stringify({\n    player: _objectSpread({}, userInfo, {\n      assertions: 0,\n      score: 0\n    })\n  });\n  localStorage.state = lsData;\n  dispatch(isFetchingToken());\n\n  try {\n    const json = await fetchToken();\n    localStorage.token = json.token;\n    return dispatch(saveToken(json.token));\n  } catch (_ref) {\n    let message = _ref.message;\n    return dispatch(saveErrorToken(message));\n  }\n};\nconst expiredTokenCode = 3;\nexport const getQuestions = token => async dispatch => {\n  dispatch(isFetchingQuestions());\n\n  try {\n    const json = await fetchQuestions(token);\n    if (json.response_code === expiredTokenCode) return dispatch(tokenExpired());\n    return dispatch(saveQuestions(json.results));\n  } catch (_ref2) {\n    let message = _ref2.message;\n    return dispatch(saveErrorQuestions(message));\n  }\n};","map":{"version":3,"sources":["/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/redux/actions/index.js"],"names":["fetchQuestions","fetchToken","FETCHING_TOKEN","REGISTER_USER","SAVE_TOKEN","SAVE_ERROR_TOKEN","RESET_GAME_STATE","FETCHING_QUESTIONS","TOKEN_EXPIRED","SAVE_QUESTIONS","SAVE_ERROR_QUESTIONS","UPDATE_SCORE","UPDATE_RANKING","isFetchingToken","type","registerUser","payload","saveToken","saveErrorToken","resetGameState","isFetchingQuestions","tokenExpired","saveQuestions","saveErrorQuestions","updateScore","updateRanking","getToken","userInfo","dispatch","lsData","JSON","stringify","player","assertions","score","localStorage","state","json","token","message","expiredTokenCode","getQuestions","response_code","results"],"mappings":"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","sourcesContent":["import { fetchQuestions, fetchToken } from '../../services/API';\n\nexport const FETCHING_TOKEN = 'FETCHING_TOKEN';\nexport const REGISTER_USER = 'REGISTER_USER';\nexport const SAVE_TOKEN = 'SAVE_TOKEN';\nexport const SAVE_ERROR_TOKEN = 'SAVE_ERROR_TOKEN';\n\nexport const RESET_GAME_STATE = 'RESET_GAME_STATE';\nexport const FETCHING_QUESTIONS = 'FETCHING_QUESTIONS';\nexport const TOKEN_EXPIRED = 'TOKEN_EXPIRED';\nexport const SAVE_QUESTIONS = 'SAVE_QUESTIONS';\nexport const SAVE_ERROR_QUESTIONS = 'SAVE_ERROR_QUESTIONS';\nexport const UPDATE_SCORE = 'UPDATE_SCORE';\nexport const UPDATE_RANKING = 'UPDATE_RANKING';\n\nexport const isFetchingToken = () => ({\n  type: FETCHING_TOKEN,\n});\n\nexport const registerUser = (payload) => ({\n  type: REGISTER_USER,\n  payload,\n});\n\nexport const saveToken = (payload) => ({\n  type: SAVE_TOKEN,\n  payload,\n});\n\nexport const saveErrorToken = (payload) => ({\n  type: SAVE_ERROR_TOKEN,\n  payload,\n});\n\nexport const resetGameState = () => ({\n  type: RESET_GAME_STATE,\n});\n\nexport const isFetchingQuestions = () => ({\n  type: FETCHING_QUESTIONS,\n});\n\nexport const tokenExpired = () => ({\n  type: TOKEN_EXPIRED,\n});\n\nexport const saveQuestions = (payload) => ({\n  type: SAVE_QUESTIONS,\n  payload,\n});\n\nexport const saveErrorQuestions = (payload) => ({\n  type: SAVE_ERROR_QUESTIONS,\n  payload,\n});\n\nexport const updateScore = (payload) => ({\n  type: UPDATE_SCORE,\n  payload,\n});\n\nexport const updateRanking = (payload) => ({\n  type: UPDATE_RANKING,\n  payload,\n});\n\nexport const getToken = (userInfo) => (\n  async (dispatch) => {\n    dispatch(resetGameState());\n    dispatch(registerUser(userInfo));\n    const lsData = JSON.stringify({ player: { ...userInfo, assertions: 0, score: 0 } });\n    localStorage.state = lsData;\n    dispatch(isFetchingToken());\n    try {\n      const json = await fetchToken();\n      localStorage.token = json.token;\n      return dispatch(saveToken(json.token));\n    } catch ({ message }) {\n      return dispatch(saveErrorToken(message));\n    }\n  }\n);\n\nconst expiredTokenCode = 3;\n\nexport const getQuestions = (token) => (\n  async (dispatch) => {\n    dispatch(isFetchingQuestions());\n    try {\n      const json = await fetchQuestions(token);\n      if (json.response_code === expiredTokenCode) return dispatch(tokenExpired());\n      return dispatch(saveQuestions(json.results));\n    } catch ({ message }) {\n      return dispatch(saveErrorQuestions(message));\n    }\n  }\n);\n"]},"metadata":{},"sourceType":"module"}