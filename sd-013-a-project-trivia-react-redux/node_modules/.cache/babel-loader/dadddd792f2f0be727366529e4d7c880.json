{"ast":null,"code":"var _jsxFileName = \"/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/pages/Login.jsx\";\n// React\nimport React from 'react'; // PropTypes\n\nimport PropTypes from 'prop-types'; // Redux\n\nimport { connect } from 'react-redux';\nimport validateLogin from '../redux/actions/validateLogin';\nimport { setGameInfo } from '../redux/actions/game'; // Services\n\nimport { apiTrivia } from '../services/apiTrivia';\nimport { putTokenInLocalStorage } from '../services/servicesAPI'; // Children\n\nimport { EmailInput, NameInput, ViewSettings, SubmitLogin, Hero } from '../components'; // Styles\n\nimport '../styles/Login.css'; // Static\n\nconst regexEmail = /^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i;\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.submitLogin = this.submitLogin.bind(this);\n    this.openSettings = this.openSettings.bind(this);\n    this.state = {\n      nome: '',\n      email: ''\n    };\n  }\n\n  async setQuestions() {\n    const _this$props = this.props,\n          dispatchGameInfo = _this$props.dispatchGameInfo,\n          numberOfQuestions = _this$props.numberOfQuestions,\n          category = _this$props.category,\n          difficult = _this$props.difficult;\n    const token = localStorage.getItem('token') || '';\n    await apiTrivia(token, numberOfQuestions, category, difficult).then(results => dispatchGameInfo(results)); // Redirecionar para a tela de jogo\n\n    const history = this.props.history;\n    history.push('/game');\n  }\n\n  handleChange({\n    target: {\n      name,\n      value\n    }\n  }) {\n    this.setState({\n      [name]: value\n    });\n  }\n\n  async submitLogin() {\n    // Guardar login na store\n    const dispatchValidateLogin = this.props.dispatchValidateLogin;\n    const _this$state = this.state,\n          nome = _this$state.nome,\n          email = _this$state.email;\n    await dispatchValidateLogin({\n      nome,\n      email\n    }); // Guardar token no local storage\n\n    putTokenInLocalStorage(); // Guardar as informações de jogo na store\n\n    await this.setQuestions();\n  }\n\n  openSettings() {\n    const history = this.props.history;\n    history.push('/settings');\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          nome = _this$state2.nome,\n          email = _this$state2.email;\n    const statusButton = !(regexEmail.test(email) && nome.length > 0);\n    return React.createElement(\"main\", {\n      className: \"Login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Hero, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"Login-Wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Login-Form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(NameInput, {\n      name: nome,\n      handleChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(EmailInput, {\n      email: email,\n      handleChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(SubmitLogin, {\n      statusButton: statusButton,\n      submitLogin: this.submitLogin,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(\"hr\", {\n      className: \"hr\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(ViewSettings, {\n      openSettings: this.openSettings,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nLogin.propTypes = {\n  dispatchValidateLogin: PropTypes.func.isRequired,\n  dispatchGameInfo: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func\n  }).isRequired,\n  numberOfQuestions: PropTypes.string.isRequired,\n  category: PropTypes.string.isRequired,\n  difficult: PropTypes.string.isRequired\n};\n\nconst mapStateToProps = state => ({\n  numberOfQuestions: state.settings.numberOfQuestions,\n  category: state.settings.category,\n  difficult: state.settings.difficult\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchValidateLogin: value => dispatch(validateLogin(value)),\n  dispatchGameInfo: value => dispatch(setGameInfo(value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/pages/Login.jsx"],"names":["React","PropTypes","connect","validateLogin","setGameInfo","apiTrivia","putTokenInLocalStorage","EmailInput","NameInput","ViewSettings","SubmitLogin","Hero","regexEmail","Login","Component","constructor","props","handleChange","bind","submitLogin","openSettings","state","nome","email","setQuestions","dispatchGameInfo","numberOfQuestions","category","difficult","token","localStorage","getItem","then","results","history","push","target","name","value","setState","dispatchValidateLogin","render","statusButton","test","length","propTypes","func","isRequired","shape","string","mapStateToProps","settings","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["// React\nimport React from 'react';\n\n// PropTypes\nimport PropTypes from 'prop-types';\n\n// Redux\nimport { connect } from 'react-redux';\nimport validateLogin from '../redux/actions/validateLogin';\nimport { setGameInfo } from '../redux/actions/game';\n\n// Services\nimport { apiTrivia } from '../services/apiTrivia';\nimport { putTokenInLocalStorage } from '../services/servicesAPI';\n\n// Children\nimport { EmailInput, NameInput, ViewSettings, SubmitLogin, Hero } from '../components';\n\n// Styles\nimport '../styles/Login.css';\n\n// Static\nconst regexEmail = /^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i;\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.submitLogin = this.submitLogin.bind(this);\n    this.openSettings = this.openSettings.bind(this);\n\n    this.state = {\n      nome: '',\n      email: '',\n    };\n  }\n\n  async setQuestions() {\n    const { dispatchGameInfo, numberOfQuestions, category, difficult } = this.props;\n\n    const token = localStorage.getItem('token') || '';\n\n    await apiTrivia(token, numberOfQuestions, category, difficult)\n      .then((results) => dispatchGameInfo(results));\n\n    // Redirecionar para a tela de jogo\n    const { history } = this.props;\n    history.push('/game');\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({ [name]: value });\n  }\n\n  async submitLogin() {\n    // Guardar login na store\n    const { dispatchValidateLogin } = this.props;\n    const { nome, email } = this.state;\n    await dispatchValidateLogin({ nome, email });\n\n    // Guardar token no local storage\n    putTokenInLocalStorage();\n\n    // Guardar as informações de jogo na store\n    await this.setQuestions();\n  }\n\n  openSettings() {\n    const { history } = this.props;\n    history.push('/settings');\n  }\n\n  render() {\n    const { nome, email } = this.state;\n    const statusButton = !(regexEmail.test(email) && nome.length > 0);\n    return (\n      <main className=\"Login\">\n        <Hero />\n        <div className=\"Login-Wrapper\">\n          <div className=\"Login-Form\">\n            { /* Input de Nome */ }\n            <NameInput\n              name={ nome }\n              handleChange={ this.handleChange }\n            />\n            { /* Input de Email */ }\n            <EmailInput\n              email={ email }\n              handleChange={ this.handleChange }\n            />\n            { /* Jogar */ }\n            <SubmitLogin\n              statusButton={ statusButton }\n              submitLogin={ this.submitLogin }\n            />\n            <hr className=\"hr\" />\n            { /* Configurações */ }\n            <ViewSettings\n              openSettings={ this.openSettings }\n            />\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n\nLogin.propTypes = {\n  dispatchValidateLogin: PropTypes.func.isRequired,\n  dispatchGameInfo: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  numberOfQuestions: PropTypes.string.isRequired,\n  category: PropTypes.string.isRequired,\n  difficult: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  numberOfQuestions: state.settings.numberOfQuestions,\n  category: state.settings.category,\n  difficult: state.settings.difficult,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchValidateLogin: (value) => dispatch(validateLogin(value)),\n  dispatchGameInfo: (value) => dispatch(setGameInfo(value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n"]},"metadata":{},"sourceType":"module"}