{"ast":null,"code":"var _jsxFileName = \"/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/helpers/shuffleAnswers.js\";\n// React\nimport React from 'react'; // Helpers\n\nimport decodeHtml from './decodeHtml';\n\nconst shuffleAnswers = (game, // Jogo\nquestionNumber, // Número da pergunta (game[questionNumber])\nsetAnswersDispatch, // Colocar retorno no estado\nanswered) => // Handle click do botão\n{\n  const answers = [];\n  const incorretas = game[questionNumber].incorrect_answers;\n  const correta = [game[questionNumber].correct_answer]; // Cria a estrutura das alternativas incorretas\n\n  answers.push(...incorretas.map((answer, index) => React.createElement(\"button\", {\n    type: \"button\",\n    className: \"incorrect-answer\",\n    \"data-testid\": `wrong-answer-${index}`,\n    key: `wrong-answer-${index}`,\n    onClick: evt => answered(evt),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, decodeHtml(answer)))); // Cria a estrutura da alternativa correta\n\n  answers.push(...correta.map(answer => React.createElement(\"button\", {\n    type: \"button\",\n    id: \"correct-answer\",\n    \"data-testid\": \"correct-answer\",\n    key: \"correct-answer\",\n    onClick: evt => answered(evt),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, decodeHtml(answer)))); // Randomizar o array das alternativas\n\n  const randomAnswers = answers.map(value => ({\n    value,\n    sort: Math.random()\n  })).sort((a, b) => a.sort - b.sort).map(({\n    value\n  }) => value); // Salvar array randomizado no estado global\n\n  setAnswersDispatch(randomAnswers);\n};\n\nexport default shuffleAnswers;","map":{"version":3,"sources":["/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/helpers/shuffleAnswers.js"],"names":["React","decodeHtml","shuffleAnswers","game","questionNumber","setAnswersDispatch","answered","answers","incorretas","incorrect_answers","correta","correct_answer","push","map","answer","index","evt","randomAnswers","value","sort","Math","random","a","b"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,cAAc,GAAG,CACrBC,IADqB,EACf;AACNC,cAFqB,EAEL;AAChBC,kBAHqB,EAGD;AACpBC,QAJqB,KAIX;AACP;AACH,QAAMC,OAAO,GAAG,EAAhB;AACA,QAAMC,UAAU,GAAGL,IAAI,CAACC,cAAD,CAAJ,CAAqBK,iBAAxC;AACA,QAAMC,OAAO,GAAG,CAACP,IAAI,CAACC,cAAD,CAAJ,CAAqBO,cAAtB,CAAhB,CAHG,CAKH;;AACAJ,EAAAA,OAAO,CAACK,IAAR,CAAa,GAAGJ,UAAU,CACvBK,GADa,CACT,CAACC,MAAD,EAASC,KAAT,KACH;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,SAAS,EAAC,kBAFZ;AAGE,mBAAe,gBAAeA,KAAM,EAHtC;AAIE,IAAA,GAAG,EAAI,gBAAeA,KAAM,EAJ9B;AAKE,IAAA,OAAO,EAAIC,GAAD,IAASV,QAAQ,CAACU,GAAD,CAL7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGf,UAAU,CAACa,MAAD,CAPb,CAFY,CAAhB,EANG,CAmBH;;AACAP,EAAAA,OAAO,CAACK,IAAR,CAAa,GAAGF,OAAO,CACpBG,GADa,CACRC,MAAD,IACH;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,EAAE,EAAC,gBAFL;AAGE,mBAAY,gBAHd;AAIE,IAAA,GAAG,EAAC,gBAJN;AAKE,IAAA,OAAO,EAAIE,GAAD,IAASV,QAAQ,CAACU,GAAD,CAL7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGf,UAAU,CAACa,MAAD,CAPb,CAFY,CAAhB,EApBG,CAiCH;;AACA,QAAMG,aAAa,GAAGV,OAAO,CAC1BM,GADmB,CACdK,KAAD,KAAY;AAAEA,IAAAA,KAAF;AAASC,IAAAA,IAAI,EAAEC,IAAI,CAACC,MAAL;AAAf,GAAZ,CADe,EAEnBF,IAFmB,CAEd,CAACG,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACH,IAAF,GAASI,CAAC,CAACJ,IAFP,EAGnBN,GAHmB,CAGf,CAAC;AAAEK,IAAAA;AAAF,GAAD,KAAeA,KAHA,CAAtB,CAlCG,CAuCH;;AACAb,EAAAA,kBAAkB,CAACY,aAAD,CAAlB;AACD,CA9CD;;AAgDA,eAAef,cAAf","sourcesContent":["// React\nimport React from 'react';\n\n// Helpers\nimport decodeHtml from './decodeHtml';\n\nconst shuffleAnswers = (\n  game, // Jogo\n  questionNumber, // Número da pergunta (game[questionNumber])\n  setAnswersDispatch, // Colocar retorno no estado\n  answered, // Handle click do botão\n) => {\n  const answers = [];\n  const incorretas = game[questionNumber].incorrect_answers;\n  const correta = [game[questionNumber].correct_answer];\n\n  // Cria a estrutura das alternativas incorretas\n  answers.push(...incorretas\n    .map((answer, index) => (\n      <button\n        type=\"button\"\n        className=\"incorrect-answer\"\n        data-testid={ `wrong-answer-${index}` }\n        key={ `wrong-answer-${index}` }\n        onClick={ (evt) => answered(evt) }\n      >\n        {decodeHtml(answer)}\n\n      </button>)));\n\n  // Cria a estrutura da alternativa correta\n  answers.push(...correta\n    .map((answer) => (\n      <button\n        type=\"button\"\n        id=\"correct-answer\"\n        data-testid=\"correct-answer\"\n        key=\"correct-answer\"\n        onClick={ (evt) => answered(evt) }\n      >\n        {decodeHtml(answer)}\n\n      </button>)));\n\n  // Randomizar o array das alternativas\n  const randomAnswers = answers\n    .map((value) => ({ value, sort: Math.random() }))\n    .sort((a, b) => a.sort - b.sort)\n    .map(({ value }) => value);\n\n  // Salvar array randomizado no estado global\n  setAnswersDispatch(randomAnswers);\n};\n\nexport default shuffleAnswers;\n"]},"metadata":{},"sourceType":"module"}