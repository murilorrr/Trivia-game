{"ast":null,"code":"var _jsxFileName = \"/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/pages/Gamepage.jsx\";\n// React\nimport React from 'react'; // PropTypes\n\nimport PropTypes from 'prop-types'; // Redux\n\nimport { connect } from 'react-redux'; // Children\n\nimport HeaderGame from '../components/HeaderGame';\nimport NextBtn from '../components/NextBtn';\nimport { pressQuestionBtn } from '../redux/actions/pressBtn';\n\nclass Gamepage extends React.Component {\n  constructor() {\n    super();\n    this.answerRandom = this.answerRandom.bind(this);\n    this.incressQuestionNumber = this.incressQuestionNumber.bind(this);\n  }\n\n  incressQuestionNumber() {\n    const _this$props = this.props,\n          dispatchIncressNumberOfQuestion = _this$props.dispatchIncressNumberOfQuestion,\n          questionNumber = _this$props.questionNumber,\n          games = _this$props.games;\n    if (Object.keys(games).length > questionNumber - 1) dispatchIncressNumberOfQuestion();\n  }\n\n  answerRandom() {\n    const answers = [];\n    const _this$props2 = this.props,\n          games = _this$props2.games,\n          questionNumber = _this$props2.questionNumber;\n    const incorretas = games[questionNumber].incorrect_answers;\n    const correta = [games[questionNumber].correct_answer];\n    answers.push(...incorretas.map((answer, index) => React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": `wrong-answer-${index}`,\n      key: `wrong-answer-${index}`,\n      onClick: this.incressQuestionNumber,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, answer)));\n    answers.push(...correta.map(answer => React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"correct-answer\",\n      key: \"correct-answer\",\n      onClick: this.incressQuestionNumber,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, answer)));\n    return answers.map(value => ({\n      value,\n      sort: Math.random()\n    })).sort((a, b) => a.sort - b.sort).map(({\n      value\n    }) => value);\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          games = _this$props3.games,\n          questionNumber = _this$props3.questionNumber;\n    const _games$questionNumber = games[questionNumber],\n          category = _games$questionNumber.category,\n          question = _games$questionNumber.question;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(HeaderGame, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), \"Sou uma P\\xE1gina de game\", React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, category), React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, question), this.answerRandom()), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(NextBtn, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    })));\n  }\n\n}\n\nGamepage.propTypes = {\n  games: PropTypes.arrayOf(PropTypes.object).isRequired,\n  questionNumber: PropTypes.number.isRequired,\n  dispatchIncressNumberOfQuestion: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  games: state.game.games,\n  questionNumber: state.game.question\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchIncressNumberOfQuestion: () => dispatch(pressQuestionBtn())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Gamepage);","map":{"version":3,"sources":["/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/pages/Gamepage.jsx"],"names":["React","PropTypes","connect","HeaderGame","NextBtn","pressQuestionBtn","Gamepage","Component","constructor","answerRandom","bind","incressQuestionNumber","props","dispatchIncressNumberOfQuestion","questionNumber","games","Object","keys","length","answers","incorretas","incorrect_answers","correta","correct_answer","push","map","answer","index","value","sort","Math","random","a","b","render","category","question","propTypes","arrayOf","object","isRequired","number","func","mapStateToProps","state","game","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["// React\nimport React from 'react';\n\n// PropTypes\nimport PropTypes from 'prop-types';\n\n// Redux\nimport { connect } from 'react-redux';\n\n// Children\nimport HeaderGame from '../components/HeaderGame';\n\nimport NextBtn from '../components/NextBtn';\nimport { pressQuestionBtn } from '../redux/actions/pressBtn';\n\nclass Gamepage extends React.Component {\n  constructor() {\n    super();\n\n    this.answerRandom = this.answerRandom.bind(this);\n    this.incressQuestionNumber = this.incressQuestionNumber.bind(this);\n  }\n\n  incressQuestionNumber() {\n    const { dispatchIncressNumberOfQuestion, questionNumber, games } = this.props;\n    if (Object.keys(games).length > questionNumber -1 ) dispatchIncressNumberOfQuestion();\n  }\n\n  answerRandom() {\n    const answers = [];\n    const { games, questionNumber } = this.props;\n    const incorretas = games[questionNumber].incorrect_answers;\n    const correta = [games[questionNumber].correct_answer];\n\n    answers.push(...incorretas\n      .map((answer, index) => (\n        <button\n          type=\"button\"\n          data-testid={ `wrong-answer-${index}` }\n          key={ `wrong-answer-${index}` }\n          onClick={ this.incressQuestionNumber }\n        >\n          {answer}\n\n        </button>)));\n    answers.push(...correta\n      .map((answer) => (\n        <button\n          type=\"button\"\n          data-testid=\"correct-answer\"\n          key=\"correct-answer\"\n          onClick={ this.incressQuestionNumber }\n        >\n          {answer}\n\n        </button>)));\n    return answers\n      .map((value) => ({ value, sort: Math.random() }))\n      .sort((a, b) => a.sort - b.sort)\n      .map(({ value }) => value);\n  }\n\n  render() {\n    const { games, questionNumber } = this.props;\n    const { category, question } = games[questionNumber];\n\n    return (\n      <div>\n        <HeaderGame />\n        Sou uma PÃ¡gina de game\n        <div>\n          <h3 data-testid=\"question-category\">\n            { category }\n          </h3>\n          <p data-testid=\"question-text\">\n            { question }\n          </p>\n          {this.answerRandom()}\n        </div>\n        <div><NextBtn /></div>\n      </div>\n    );\n  }\n}\n\nGamepage.propTypes = {\n  games: PropTypes.arrayOf(PropTypes.object).isRequired,\n  questionNumber: PropTypes.number.isRequired,\n  dispatchIncressNumberOfQuestion: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  games: state.game.games,\n  questionNumber: state.game.question,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchIncressNumberOfQuestion: () => dispatch(pressQuestionBtn()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Gamepage);\n"]},"metadata":{},"sourceType":"module"}