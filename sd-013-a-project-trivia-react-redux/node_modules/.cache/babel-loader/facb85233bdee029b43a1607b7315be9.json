{"ast":null,"code":"var _jsxFileName = \"/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/pages/Gamepage.jsx\";\n// React\nimport React from 'react'; // PropTypes\n\nimport PropTypes from 'prop-types'; // Redux\n\nimport { connect } from 'react-redux';\nimport { setAnswers, setAssertions, toggleTimer } from '../redux/actions/game';\nimport { pressQuestionBtn } from '../redux/actions/pressBtn'; // Children\n\nimport HeaderGame from '../components/HeaderGame';\nimport NextBtn from '../components/NextBtn';\nimport GameTimer from '../components/GameTimer';\nimport GameAnswers from '../components/GameAnswers'; // Helpers\n\nimport shuffleAnswers from '../helpers/shuffleAnswers'; // Styles\n\nimport '../styles/Gamepage.css';\n\nclass Gamepage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.setAnswers = this.setAnswers.bind(this);\n    this.enableNextBtn = this.enableNextBtn.bind(this);\n    this.sendScoreToLocalStorage = this.sendScoreToLocalStorage.bind(this);\n    this.setAssertions = this.setAssertions.bind(this);\n    this.answered = this.answered.bind(this);\n  }\n\n  componentDidMount() {\n    const toggleTimerDispatch = this.props.toggleTimerDispatch;\n    this.setAnswers();\n    toggleTimerDispatch();\n  }\n\n  componentDidUpdate() {\n    this.setAnswers();\n  }\n  /* As funções a seguir estão relacionadas com os eventos das respostas */\n\n\n  setAnswers() {\n    const _this$props = this.props,\n          game = _this$props.game,\n          questionNumber = _this$props.questionNumber,\n          setAnswersDispatch = _this$props.setAnswersDispatch;\n    shuffleAnswers(game, questionNumber, setAnswersDispatch, this.answered); // Salva as respostas na chave answers do estado global\n  }\n\n  setAssertions(target) {\n    const setAssertionsDispatch = this.props.setAssertionsDispatch; // Acertos\n\n    let assertions = 0;\n\n    if (target.id === 'correct-answer') {\n      assertions += 1;\n      console.log('Alternativa correta!');\n    }\n\n    console.log('Alternativa incorreta.');\n    setAssertionsDispatch(assertions);\n  }\n\n  enableNextBtn() {\n    const enableNextBtnDispatch = this.props.enableNextBtnDispatch;\n    enableNextBtnDispatch();\n  }\n\n  sendScoreToLocalStorage({\n    target\n  }) {\n    console.log(target.classList);\n\n    if (target.classList[0] === 'correct-highlight') {\n      // Obtendo dados\n      const timer = 1; // = this.state utilizar o timer do state;\n\n      const _this$props2 = this.props,\n            games = _this$props2.games,\n            questionNumber = _this$props2.questionNumber;\n      const difficulty = games[questionNumber].difficulty; // Utilizando variaveis de controle\n\n      const obj = {\n        hard: 3,\n        medium: 2,\n        easy: 1\n      };\n      let valor;\n\n      switch (difficulty) {\n        case 'hard':\n          valor = obj.hard;\n          break;\n\n        case 'medium':\n          valor = obj.medium;\n          break;\n\n        case 'easy':\n          valor = obj.easy;\n          break;\n\n        default:\n      } // Obtendo dados do localStorage\n\n\n      const state = JSON.parse(localStorage.getItem('state'));\n      const defaultReward = 10;\n      state.player.score += defaultReward + valor * timer; // devolvendo os dados para o localStorage\n\n      localStorage.setItem('state', JSON.stringify(state));\n    }\n  }\n\n  handleAnswerClick(event) {\n    // Adiciona estilo para a alternativa correta\n    const correta = document.querySelector('#correct-answer');\n    correta.classList.add('correct-highlight'); // Disabilita botões de resposta\n\n    correta.disabled = true; // Adiciona estilo para as alternativas incorretas\n\n    const incorretas = document.querySelectorAll('.incorrect-answer');\n    incorretas.forEach(el => {\n      el.classList.add('incorrect-highlight'); // Habilitar nova pergunta\n\n      this.enableNextBtn(); // Enviar score para o state do LocalStorage\n\n      this.sendScoreToLocalStorage(event); // Disabilita botões de resposta\n\n      el.disabled = true;\n    });\n  }\n\n  answered({\n    target\n  }) {\n    const toggleTimerDispatch = this.props.toggleTimerDispatch; // Desligar timer\n\n    toggleTimerDispatch(); // Estilos\n\n    this.addStyles(); // Atualizar pontuação\n\n    this.setAssertions(target); // Habilitar nova pergunta\n\n    this.enableNextBtn();\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          game = _this$props3.game,\n          questionNumber = _this$props3.questionNumber;\n    const _game$questionNumber = game[questionNumber],\n          category = _game$questionNumber.category,\n          question = _game$questionNumber.question;\n    return React.createElement(\"section\", {\n      className: \"Gamepage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(HeaderGame, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(GameTimer, {\n      addStyles: this.addStyles,\n      enableNextBtn: this.enableNextBtn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, category), React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, question), React.createElement(GameAnswers, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    })), React.createElement(NextBtn, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }));\n  }\n\n}\n\nGamepage.propTypes = {\n  game: PropTypes.arrayOf(PropTypes.object).isRequired,\n  // Array de perguntas\n  questionNumber: PropTypes.number.isRequired,\n  // Número da pergunta\n  setAnswersDispatch: PropTypes.func.isRequired,\n  // Salvar respostas\n  setAssertionsDispatch: PropTypes.func.isRequired,\n  // Salvar pontuação\n  enableNextBtnDispatch: PropTypes.func.isRequired,\n  // Habilitar nova pergunta\n  toggleTimerDispatch: PropTypes.func.isRequired // Ligar/Desligar timer\n\n};\n\nconst mapStateToProps = state => ({\n  game: state.game.game,\n  questionNumber: state.game.questionNumber\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setAnswersDispatch: payload => dispatch(setAnswers(payload)),\n  setAssertionsDispatch: payload => dispatch(setAssertions(payload)),\n  enableNextBtnDispatch: payload => dispatch(pressQuestionBtn(payload)),\n  toggleTimerDispatch: () => dispatch(toggleTimer())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Gamepage);","map":{"version":3,"sources":["/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/pages/Gamepage.jsx"],"names":["React","PropTypes","connect","setAnswers","setAssertions","toggleTimer","pressQuestionBtn","HeaderGame","NextBtn","GameTimer","GameAnswers","shuffleAnswers","Gamepage","Component","constructor","props","bind","enableNextBtn","sendScoreToLocalStorage","answered","componentDidMount","toggleTimerDispatch","componentDidUpdate","game","questionNumber","setAnswersDispatch","target","setAssertionsDispatch","assertions","id","console","log","enableNextBtnDispatch","classList","timer","games","difficulty","obj","hard","medium","easy","valor","state","JSON","parse","localStorage","getItem","defaultReward","player","score","setItem","stringify","handleAnswerClick","event","correta","document","querySelector","add","disabled","incorretas","querySelectorAll","forEach","el","addStyles","render","category","question","propTypes","arrayOf","object","isRequired","number","func","mapStateToProps","mapDispatchToProps","dispatch","payload"],"mappings":"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","sourcesContent":["// React\nimport React from 'react';\n\n// PropTypes\nimport PropTypes from 'prop-types';\n\n// Redux\nimport { connect } from 'react-redux';\nimport { setAnswers, setAssertions, toggleTimer } from '../redux/actions/game';\nimport { pressQuestionBtn } from '../redux/actions/pressBtn';\n\n// Children\nimport HeaderGame from '../components/HeaderGame';\nimport NextBtn from '../components/NextBtn';\nimport GameTimer from '../components/GameTimer';\nimport GameAnswers from '../components/GameAnswers';\n\n// Helpers\nimport shuffleAnswers from '../helpers/shuffleAnswers';\n\n// Styles\nimport '../styles/Gamepage.css';\n\nclass Gamepage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setAnswers = this.setAnswers.bind(this);\n    this.enableNextBtn = this.enableNextBtn.bind(this);\n    this.sendScoreToLocalStorage = this.sendScoreToLocalStorage.bind(this);\n    this.setAssertions = this.setAssertions.bind(this);\n    this.answered = this.answered.bind(this);\n  }\n\n  componentDidMount() {\n    const { toggleTimerDispatch } = this.props;\n    this.setAnswers();\n    toggleTimerDispatch();\n  }\n\n  componentDidUpdate() {\n    this.setAnswers();\n  }\n\n  /* As funções a seguir estão relacionadas com os eventos das respostas */\n  setAnswers() {\n    const {\n      game,\n      questionNumber,\n      setAnswersDispatch,\n    } = this.props;\n\n    shuffleAnswers(\n      game,\n      questionNumber,\n      setAnswersDispatch,\n      this.answered,\n    ); // Salva as respostas na chave answers do estado global\n  }\n\n  setAssertions(target) {\n    const { setAssertionsDispatch } = this.props;\n    // Acertos\n    let assertions = 0;\n\n    if (target.id === 'correct-answer') {\n      assertions += 1;\n      console.log('Alternativa correta!');\n    }\n\n    console.log('Alternativa incorreta.');\n\n    setAssertionsDispatch(assertions);\n  }\n\n  enableNextBtn() {\n    const { enableNextBtnDispatch } = this.props;\n    enableNextBtnDispatch();\n  }\n\n  sendScoreToLocalStorage({ target }) {\n    console.log(target.classList);\n    if (target.classList[0] === ('correct-highlight')) {\n      // Obtendo dados\n      const timer = 1;\n      // = this.state utilizar o timer do state;\n      const { games, questionNumber } = this.props;\n      const { difficulty } = games[questionNumber];\n      // Utilizando variaveis de controle\n      const obj = { hard: 3, medium: 2, easy: 1 };\n      let valor;\n      switch (difficulty) {\n      case 'hard':\n        valor = obj.hard;\n        break;\n      case 'medium':\n        valor = obj.medium;\n        break;\n      case 'easy':\n        valor = obj.easy;\n        break;\n      default:\n      }\n      // Obtendo dados do localStorage\n      const state = JSON.parse(localStorage.getItem('state'));\n      const defaultReward = 10;\n      state.player.score += defaultReward + valor * timer;\n      // devolvendo os dados para o localStorage\n      localStorage.setItem('state', JSON.stringify(state));\n    }\n  }\n\n  handleAnswerClick(event) {\n    // Adiciona estilo para a alternativa correta\n    const correta = document.querySelector('#correct-answer');\n    correta.classList.add('correct-highlight');\n\n    // Disabilita botões de resposta\n    correta.disabled = true;\n\n    // Adiciona estilo para as alternativas incorretas\n    const incorretas = document.querySelectorAll('.incorrect-answer');\n    incorretas.forEach((el) => {\n      el.classList.add('incorrect-highlight');\n\n      // Habilitar nova pergunta\n      this.enableNextBtn();\n\n      // Enviar score para o state do LocalStorage\n      this.sendScoreToLocalStorage(event);\n      // Disabilita botões de resposta\n      el.disabled = true;\n    });\n  }\n\n  answered({ target }) {\n    const { toggleTimerDispatch } = this.props;\n    // Desligar timer\n    toggleTimerDispatch();\n\n    // Estilos\n    this.addStyles();\n\n    // Atualizar pontuação\n    this.setAssertions(target);\n\n    // Habilitar nova pergunta\n    this.enableNextBtn();\n  }\n\n  render() {\n    const { game, questionNumber } = this.props;\n    const { category, question } = game[questionNumber];\n\n    return (\n      <section className=\"Gamepage\">\n        <HeaderGame />\n        <GameTimer\n          addStyles={ this.addStyles }\n          enableNextBtn={ this.enableNextBtn }\n        />\n        <div>\n          <h3 data-testid=\"question-category\">\n            { category }\n          </h3>\n          <p data-testid=\"question-text\">\n            { question }\n          </p>\n          <GameAnswers />\n        </div>\n        <NextBtn />\n      </section>\n    );\n  }\n}\n\nGamepage.propTypes = {\n  game: PropTypes.arrayOf(PropTypes.object).isRequired, // Array de perguntas\n  questionNumber: PropTypes.number.isRequired, // Número da pergunta\n  setAnswersDispatch: PropTypes.func.isRequired, // Salvar respostas\n  setAssertionsDispatch: PropTypes.func.isRequired, // Salvar pontuação\n  enableNextBtnDispatch: PropTypes.func.isRequired, // Habilitar nova pergunta\n  toggleTimerDispatch: PropTypes.func.isRequired, // Ligar/Desligar timer\n};\n\nconst mapStateToProps = (state) => ({\n  game: state.game.game,\n  questionNumber: state.game.questionNumber,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setAnswersDispatch: (payload) => dispatch(setAnswers(payload)),\n  setAssertionsDispatch: (payload) => dispatch(setAssertions(payload)),\n  enableNextBtnDispatch: (payload) => dispatch(pressQuestionBtn(payload)),\n  toggleTimerDispatch: () => dispatch(toggleTimer()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Gamepage);\n"]},"metadata":{},"sourceType":"module"}