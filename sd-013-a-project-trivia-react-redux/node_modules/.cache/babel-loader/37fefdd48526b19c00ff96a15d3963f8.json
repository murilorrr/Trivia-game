{"ast":null,"code":"var _jsxFileName = \"/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/pages/Settings.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport Loading from '../components/Loading'; // import {} from '../redux/actions';\n\nconst QUESTIONS_LIMIT = 50;\n\nclass Settings extends React.Component {\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     inputSettings: {\n  //       amount: props.amount,\n  //       categoryId: props.categoryId,\n  //       difficulty: props.difficulty,\n  //     },\n  //     redirect: false,\n  //   };\n  //   this.handleChange = this.handleChange.bind(this);\n  // }\n  // componentDidMount() {\n  //   const { allCategories, getCategories } = this.props;\n  //   if (allCategories.length === 0) getCategories();\n  // }\n  // getQuestionCount() {\n  //   const { allCategories } = this.props;\n  //   const { inputSettings: { categoryId, difficulty } } = this.state;\n  //   if (!categoryId) {\n  //     if (!difficulty) {\n  //       return allCategories.reduce(\n  //         (acc, curr) => acc + curr.questionCount.total,\n  //         0,\n  //       );\n  //     }\n  //     return allCategories.reduce(\n  //       (acc, curr) => acc + curr.questionCount[difficulty],\n  //       0,\n  //     );\n  //   }\n  //   const category = allCategories.find(({ id }) => id === Number(categoryId));\n  //   if (!difficulty) return category.questionCount.total;\n  //   return category.questionCount[difficulty];\n  // }\n  // handleChange({ target: { name, value } }) {\n  //   this.setState((prevState) => ({\n  //     inputSettings: {\n  //       ...prevState.inputSettings,\n  //       [name]: value,\n  //     },\n  //   }));\n  // }\n  // renderSelectCategory() {\n  //   const { allCategories } = this.props;\n  //   const { inputSettings: { categoryId } } = this.state;\n  //   return (\n  //     <label htmlFor=\"category\">\n  //       Select Category:\n  //       <select\n  //         id=\"category\"\n  //         name=\"categoryId\"\n  //         defaultValue={ categoryId }\n  //         onChange={ this.handleChange }\n  //       >\n  //         <option value=\"\">Any Category</option>\n  //         {allCategories.map((category) => (\n  //           <option key={ category.id } value={ category.id }>\n  //             {category.name}\n  //           </option>\n  //         ))}\n  //       </select>\n  //     </label>\n  //   );\n  // }\n  // renderSelectDifficulty() {\n  //   const { inputSettings: { difficulty } } = this.state;\n  //   return (\n  //     <label htmlFor=\"difficulty\">\n  //       Select Difficulty:\n  //       <select\n  //         id=\"difficulty\"\n  //         name=\"difficulty\"\n  //         defaultValue={ difficulty }\n  //         onChange={ this.handleChange }\n  //       >\n  //         <option value=\"\">Any Difficulty</option>\n  //         <option value=\"easy\">Easy</option>\n  //         <option value=\"medium\">Medium</option>\n  //         <option value=\"hard\">Hard</option>\n  //       </select>\n  //     </label>\n  //   );\n  // }\n  // renderNumberOfQuestions() {\n  //   const { inputSettings: { amount } } = this.state;\n  //   return (\n  //     <label htmlFor=\"amount\">\n  //       { `Number of Questions: ${amount}` }\n  //       <input\n  //         type=\"range\"\n  //         id=\"amount\"\n  //         className=\"slider\"\n  //         name=\"amount\"\n  //         min=\"5\"\n  //         max={ QUESTIONS_LIMIT }\n  //         defaultValue={ amount }\n  //         onChange={ this.handleChange }\n  //       />\n  //     </label>\n  //   );\n  // }\n  render() {\n    // const { inputSettings, redirect } = this.state;\n    // const { isLoading, saveSettings } = this.props;\n    // const questionCount = this.getQuestionCount();\n    // const isHigher = inputSettings.amount > questionCount;\n    // const warningMessage = isHigher ? 'Insufficient questions!' : '';\n    // if (redirect) return <Redirect to=\"/\" />;\n    // if (isLoading) return <Loading />;\n    return React.createElement(\"main\", {\n      id: \"settings-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Settings\"), React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"avaible-questions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Total available Questions:\")), React.createElement(\"div\", {\n      id: \"settings\",\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"button\",\n      className: \"button-main\",\n      value: \"Save\",\n      onClick: () => {// saveSettings({ inputSettings });\n        // this.setState({ redirect: true });\n      } // disabled={ isHigher }\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }))));\n  }\n\n} // const mapStateToProps = ({ settings }) => ({\n//   allCategories: settings.allCategories,\n//   amount: settings.amount,\n//   categoryId: settings.categoryId,\n//   difficulty: settings.difficulty,\n//   isLoading: settings.isLoading,\n// });\n// const mapDispatchToProps = (dispatch) => ({\n//   getCategories: () => dispatch(getCategoriesThunk()),\n//   saveSettings: (payload) => dispatch(saveSettingsActionCreator(payload)),\n// });\n\n\nexport default connect(null, null)(Settings);","map":{"version":3,"sources":["/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/pages/Settings.js"],"names":["React","connect","Redirect","Loading","QUESTIONS_LIMIT","Settings","Component","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,cAAzB;AAEA,OAAOC,OAAP,MAAoB,uBAApB,C,CACA;;AAEA,MAAMC,eAAe,GAAG,EAAxB;;AAEA,MAAMC,QAAN,SAAuBL,KAAK,CAACM,SAA7B,CAAuC;AACreAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,EAAE,EAAC,mBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADF,CADF,EAKE;AAAK,MAAA,EAAE,EAAC,UAAR;AAAmB,MAAA,SAAS,EAAC,WAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,SAAS,EAAC,aAFZ;AAGE,MAAA,KAAK,EAAC,MAHR;AAIE,MAAA,OAAO,EAAG,MAAM,CACd;AACA;AACD,OAPH,CAQE;AARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CALF,CAFF,CADF;AA2BD;;AA5JoC,C,CA+JvC;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA,eAAeN,OAAO,CAAC,IAAD,EAAO,IAAP,CAAP,CAAoBI,QAApB,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\n\nimport Loading from '../components/Loading';\n// import {} from '../redux/actions';\n\nconst QUESTIONS_LIMIT = 50;\n\nclass Settings extends React.Component {\n  // constructor(props) {\n  //   super(props);\n\n  //   this.state = {\n  //     inputSettings: {\n  //       amount: props.amount,\n  //       categoryId: props.categoryId,\n  //       difficulty: props.difficulty,\n  //     },\n  //     redirect: false,\n  //   };\n\n  //   this.handleChange = this.handleChange.bind(this);\n  // }\n\n  // componentDidMount() {\n  //   const { allCategories, getCategories } = this.props;\n  //   if (allCategories.length === 0) getCategories();\n  // }\n\n  // getQuestionCount() {\n  //   const { allCategories } = this.props;\n  //   const { inputSettings: { categoryId, difficulty } } = this.state;\n\n  //   if (!categoryId) {\n  //     if (!difficulty) {\n  //       return allCategories.reduce(\n  //         (acc, curr) => acc + curr.questionCount.total,\n  //         0,\n  //       );\n  //     }\n  //     return allCategories.reduce(\n  //       (acc, curr) => acc + curr.questionCount[difficulty],\n  //       0,\n  //     );\n  //   }\n\n  //   const category = allCategories.find(({ id }) => id === Number(categoryId));\n\n  //   if (!difficulty) return category.questionCount.total;\n  //   return category.questionCount[difficulty];\n  // }\n\n  // handleChange({ target: { name, value } }) {\n  //   this.setState((prevState) => ({\n  //     inputSettings: {\n  //       ...prevState.inputSettings,\n  //       [name]: value,\n  //     },\n  //   }));\n  // }\n\n  // renderSelectCategory() {\n  //   const { allCategories } = this.props;\n  //   const { inputSettings: { categoryId } } = this.state;\n\n  //   return (\n  //     <label htmlFor=\"category\">\n  //       Select Category:\n  //       <select\n  //         id=\"category\"\n  //         name=\"categoryId\"\n  //         defaultValue={ categoryId }\n  //         onChange={ this.handleChange }\n  //       >\n  //         <option value=\"\">Any Category</option>\n  //         {allCategories.map((category) => (\n  //           <option key={ category.id } value={ category.id }>\n  //             {category.name}\n  //           </option>\n  //         ))}\n  //       </select>\n  //     </label>\n  //   );\n  // }\n\n  // renderSelectDifficulty() {\n  //   const { inputSettings: { difficulty } } = this.state;\n\n  //   return (\n  //     <label htmlFor=\"difficulty\">\n  //       Select Difficulty:\n  //       <select\n  //         id=\"difficulty\"\n  //         name=\"difficulty\"\n  //         defaultValue={ difficulty }\n  //         onChange={ this.handleChange }\n  //       >\n  //         <option value=\"\">Any Difficulty</option>\n  //         <option value=\"easy\">Easy</option>\n  //         <option value=\"medium\">Medium</option>\n  //         <option value=\"hard\">Hard</option>\n  //       </select>\n  //     </label>\n  //   );\n  // }\n\n  // renderNumberOfQuestions() {\n  //   const { inputSettings: { amount } } = this.state;\n\n  //   return (\n  //     <label htmlFor=\"amount\">\n  //       { `Number of Questions: ${amount}` }\n  //       <input\n  //         type=\"range\"\n  //         id=\"amount\"\n  //         className=\"slider\"\n  //         name=\"amount\"\n  //         min=\"5\"\n  //         max={ QUESTIONS_LIMIT }\n  //         defaultValue={ amount }\n  //         onChange={ this.handleChange }\n  //       />\n  //     </label>\n  //   );\n  // }\n\n  render() {\n    // const { inputSettings, redirect } = this.state;\n    // const { isLoading, saveSettings } = this.props;\n\n    // const questionCount = this.getQuestionCount();\n    // const isHigher = inputSettings.amount > questionCount;\n    // const warningMessage = isHigher ? 'Insufficient questions!' : '';\n\n    // if (redirect) return <Redirect to=\"/\" />;\n    // if (isLoading) return <Loading />;\n\n    return (\n      <main id=\"settings-page\">\n        <h1>Settings</h1>\n        <section>\n          <div id=\"avaible-questions\">\n            <span>Total available Questions:</span>\n            {/* <span>{questionCount}</span> */}\n          </div>\n          <div id=\"settings\" className=\"container\">\n            {/* {this.renderSelectCategory()}\n            {this.renderSelectDifficulty()}\n            {this.renderNumberOfQuestions()} */}\n            <input\n              type=\"button\"\n              className=\"button-main\"\n              value=\"Save\"\n              onClick={ () => {\n                // saveSettings({ inputSettings });\n                // this.setState({ redirect: true });\n              } }\n              // disabled={ isHigher }\n            />\n          </div>\n        </section>\n        {/* <span className=\"warning-message\">{ warningMessage }</span> */}\n      </main>\n    );\n  }\n}\n\n// const mapStateToProps = ({ settings }) => ({\n//   allCategories: settings.allCategories,\n//   amount: settings.amount,\n//   categoryId: settings.categoryId,\n//   difficulty: settings.difficulty,\n//   isLoading: settings.isLoading,\n// });\n\n// const mapDispatchToProps = (dispatch) => ({\n//   getCategories: () => dispatch(getCategoriesThunk()),\n//   saveSettings: (payload) => dispatch(saveSettingsActionCreator(payload)),\n// });\n\nexport default connect(null, null)(Settings);"]},"metadata":{},"sourceType":"module"}