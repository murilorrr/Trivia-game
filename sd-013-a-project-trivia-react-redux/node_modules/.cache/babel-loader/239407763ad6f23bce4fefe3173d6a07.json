{"ast":null,"code":"var _jsxFileName = \"/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/pages/Gamepage.jsx\";\n// React\nimport React from 'react'; // PropTypes\n\nimport PropTypes from 'prop-types'; // Redux\n\nimport { connect } from 'react-redux';\nimport { setAnswers, setAssertions, setScore } from '../redux/actions/game';\nimport { toggleTimer } from '../redux/actions/timer';\nimport { pressQuestionBtn } from '../redux/actions/pressBtn'; // Services\n\nimport gravatar from '../services/gravatarAPI'; // Children\n\nimport { HeaderGame, NextBtn, GameTimer, GameAnswers } from '../components'; // Helpers\n\nimport shuffleAnswers from '../helpers/shuffleAnswers';\nimport decodeHtml from '../helpers/decodeHtml'; // Styles\n\nimport '../styles/Gamepage.css';\n\nclass Gamepage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.setAnswers = this.setAnswers.bind(this);\n    this.enableNextBtn = this.enableNextBtn.bind(this);\n    this.setAssertions = this.setAssertions.bind(this);\n    this.addStyles = this.addStyles.bind(this);\n    this.answered = this.answered.bind(this);\n    this.playerLocalStorage = this.playerLocalStorage.bind(this);\n    this.sendScoreToLocalStorage = this.sendScoreToLocalStorage.bind(this);\n  }\n\n  componentDidMount() {\n    this.playerLocalStorage();\n    const toggleTimerDispatch = this.props.toggleTimerDispatch;\n    this.setAnswers();\n    toggleTimerDispatch();\n  }\n  /* As funções a seguir estão relacionadas com os eventos das respostas */\n\n\n  setAnswers() {\n    const _this$props = this.props,\n          game = _this$props.game,\n          questionNumber = _this$props.questionNumber,\n          setAnswersDispatch = _this$props.setAnswersDispatch;\n    shuffleAnswers(game, questionNumber, setAnswersDispatch, this.answered); // Salva as respostas na chave answers do estado global\n  }\n\n  setAssertions(target) {\n    const setAssertionsDispatch = this.props.setAssertionsDispatch; // Acertos\n\n    let assertions = 0;\n\n    if (target.id === 'correct-answer') {\n      assertions += 1;\n    }\n\n    const previous = JSON.parse(localStorage.getItem('state'));\n    const updated = previous;\n    updated.player.assertions += assertions;\n    localStorage.setItem('state', JSON.stringify(updated));\n    setAssertionsDispatch(assertions);\n  }\n\n  playerLocalStorage() {\n    const _this$props2 = this.props,\n          playerEmail = _this$props2.playerEmail,\n          playerName = _this$props2.playerName;\n    /*\n      state: {\n          player: {\n          name,\n          assertions,\n          score,\n          gravatarEmail\n        },\n      }\n    */\n\n    const player = {\n      player: {\n        name: playerName,\n        assertions: 0,\n        score: 0,\n        gravatarEmail: gravatar(playerEmail)\n      }\n    };\n    window.localStorage.setItem('state', JSON.stringify(player));\n  }\n\n  enableNextBtn() {\n    const enableNextBtnDispatch = this.props.enableNextBtnDispatch;\n    enableNextBtnDispatch();\n  }\n\n  addStyles() {\n    // Adiciona estilo para a alternativa correta\n    const correta = document.querySelector('#correct-answer');\n    correta.classList.add('correct-highlight'); // Disabilita botões de resposta\n\n    correta.disabled = true; // Adiciona estilo para as alternativas incorretas\n\n    const incorretas = document.querySelectorAll('.incorrect-answer');\n    incorretas.forEach(el => {\n      el.classList.add('incorrect-highlight'); // Disabilita botões de resposta\n\n      el.disabled = true;\n    });\n  }\n\n  sendScoreToLocalStorage(target) {\n    if (target.id === 'correct-answer') {\n      // Obtendo dados\n      const _this$props3 = this.props,\n            timer = _this$props3.timer,\n            scoreDispatch = _this$props3.scoreDispatch; // = this.state utilizar o timer do state;\n\n      const _this$props4 = this.props,\n            game = _this$props4.game,\n            questionNumber = _this$props4.questionNumber;\n      const difficulty = game[questionNumber].difficulty; // Utilizando variaveis de controle\n\n      const obj = {\n        hard: 3,\n        medium: 2,\n        easy: 1\n      };\n      let valor;\n\n      switch (difficulty) {\n        case 'hard':\n          valor = obj.hard;\n          break;\n\n        case 'medium':\n          valor = obj.medium;\n          break;\n\n        case 'easy':\n          valor = obj.easy;\n          break;\n\n        default:\n      } // Obtendo dados do localStorage\n\n\n      const state = JSON.parse(localStorage.getItem('state'));\n      const defaultReward = 10;\n      state.player.score += defaultReward + valor * timer; // devolvendo os dados para o localStorage\n\n      localStorage.setItem('state', JSON.stringify(state));\n      scoreDispatch(state.player.score);\n    }\n  }\n\n  answered({\n    target\n  }) {\n    const toggleTimerDispatch = this.props.toggleTimerDispatch; // Desligar timer\n\n    toggleTimerDispatch(); // Estilos\n\n    this.addStyles(); // Atualizar pontuação\n\n    this.sendScoreToLocalStorage(target);\n    this.setAssertions(target); // Habilitar nova pergunta\n\n    this.enableNextBtn();\n  }\n\n  render() {\n    const _this$props5 = this.props,\n          game = _this$props5.game,\n          questionNumber = _this$props5.questionNumber;\n    const _game$questionNumber = game[questionNumber],\n          category = _game$questionNumber.category,\n          question = _game$questionNumber.question;\n    return React.createElement(\"section\", {\n      className: \"Gamepage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(HeaderGame, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), React.createElement(GameTimer, {\n      addStyles: this.addStyles,\n      enableNextBtn: this.enableNextBtn,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"questions-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"progress\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"question-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, category), React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, decodeHtml(question))), React.createElement(\"div\", {\n      className: \"game-answers\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(GameAnswers, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }))), React.createElement(NextBtn, {\n      setAnswers: this.setAnswers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }));\n  }\n\n}\n\nGamepage.propTypes = {\n  playerName: PropTypes.string.isRequired,\n  playerEmail: PropTypes.string.isRequired,\n  game: PropTypes.arrayOf(PropTypes.object).isRequired,\n  // Array de perguntas\n  questionNumber: PropTypes.number.isRequired,\n  // Número da pergunta\n  timer: PropTypes.number.isRequired,\n  // Número do tempo\n  setAnswersDispatch: PropTypes.func.isRequired,\n  // Salvar respostas\n  setAssertionsDispatch: PropTypes.func.isRequired,\n  // Salvar pontuação\n  enableNextBtnDispatch: PropTypes.func.isRequired,\n  // Habilitar nova pergunta\n  toggleTimerDispatch: PropTypes.func.isRequired,\n  // Ligar/Desligar timer\n  scoreDispatch: PropTypes.func.isRequired // Ligar/Desligar timer\n\n};\n\nconst mapStateToProps = state => ({\n  game: state.game.game,\n  questionNumber: state.game.questionNumber,\n  timer: state.timer.timer,\n  playerName: state.login.nome,\n  playerEmail: state.login.email\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setAnswersDispatch: payload => dispatch(setAnswers(payload)),\n  setAssertionsDispatch: payload => dispatch(setAssertions(payload)),\n  enableNextBtnDispatch: payload => dispatch(pressQuestionBtn(payload)),\n  toggleTimerDispatch: () => dispatch(toggleTimer()),\n  scoreDispatch: payload => dispatch(setScore(payload))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Gamepage);","map":{"version":3,"sources":["/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/pages/Gamepage.jsx"],"names":["React","PropTypes","connect","setAnswers","setAssertions","setScore","toggleTimer","pressQuestionBtn","gravatar","HeaderGame","NextBtn","GameTimer","GameAnswers","shuffleAnswers","decodeHtml","Gamepage","Component","constructor","props","bind","enableNextBtn","addStyles","answered","playerLocalStorage","sendScoreToLocalStorage","componentDidMount","toggleTimerDispatch","game","questionNumber","setAnswersDispatch","target","setAssertionsDispatch","assertions","id","previous","JSON","parse","localStorage","getItem","updated","player","setItem","stringify","playerEmail","playerName","name","score","gravatarEmail","window","enableNextBtnDispatch","correta","document","querySelector","classList","add","disabled","incorretas","querySelectorAll","forEach","el","timer","scoreDispatch","difficulty","obj","hard","medium","easy","valor","state","defaultReward","render","category","question","propTypes","string","isRequired","arrayOf","object","number","func","mapStateToProps","login","nome","email","mapDispatchToProps","dispatch","payload"],"mappings":"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","sourcesContent":["// React\nimport React from 'react';\n\n// PropTypes\nimport PropTypes from 'prop-types';\n\n// Redux\nimport { connect } from 'react-redux';\nimport { setAnswers, setAssertions, setScore } from '../redux/actions/game';\nimport { toggleTimer } from '../redux/actions/timer';\nimport { pressQuestionBtn } from '../redux/actions/pressBtn';\n\n// Services\nimport gravatar from '../services/gravatarAPI';\n\n// Children\nimport { HeaderGame, NextBtn, GameTimer, GameAnswers } from '../components';\n\n// Helpers\nimport shuffleAnswers from '../helpers/shuffleAnswers';\nimport decodeHtml from '../helpers/decodeHtml';\n\n// Styles\nimport '../styles/Gamepage.css';\n\nclass Gamepage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setAnswers = this.setAnswers.bind(this);\n    this.enableNextBtn = this.enableNextBtn.bind(this);\n    this.setAssertions = this.setAssertions.bind(this);\n    this.addStyles = this.addStyles.bind(this);\n    this.answered = this.answered.bind(this);\n    this.playerLocalStorage = this.playerLocalStorage.bind(this);\n    this.sendScoreToLocalStorage = this.sendScoreToLocalStorage.bind(this);\n  }\n\n  componentDidMount() {\n    this.playerLocalStorage();\n    const { toggleTimerDispatch } = this.props;\n    this.setAnswers();\n    toggleTimerDispatch();\n  }\n\n  /* As funções a seguir estão relacionadas com os eventos das respostas */\n  setAnswers() {\n    const {\n      game,\n      questionNumber,\n      setAnswersDispatch,\n    } = this.props;\n\n    shuffleAnswers(\n      game,\n      questionNumber,\n      setAnswersDispatch,\n      this.answered,\n    ); // Salva as respostas na chave answers do estado global\n  }\n\n  setAssertions(target) {\n    const { setAssertionsDispatch } = this.props;\n    // Acertos\n    let assertions = 0;\n\n    if (target.id === 'correct-answer') {\n      assertions += 1;\n    }\n\n    const previous = JSON.parse(\n      localStorage.getItem('state'),\n    );\n\n    const updated = previous;\n\n    updated.player.assertions += assertions;\n\n    localStorage.setItem('state', JSON.stringify(updated));\n    setAssertionsDispatch(assertions);\n  }\n\n  playerLocalStorage() {\n    const { props: { playerEmail, playerName } } = this;\n    /*\n      state: {\n          player: {\n          name,\n          assertions,\n          score,\n          gravatarEmail\n        },\n      }\n    */\n    const player = { player: {\n      name: playerName,\n      assertions: 0,\n      score: 0,\n      gravatarEmail: gravatar(playerEmail),\n    } };\n\n    window.localStorage.setItem('state', JSON.stringify(player));\n  }\n\n  enableNextBtn() {\n    const { enableNextBtnDispatch } = this.props;\n    enableNextBtnDispatch();\n  }\n\n  addStyles() {\n    // Adiciona estilo para a alternativa correta\n    const correta = document.querySelector('#correct-answer');\n    correta.classList.add('correct-highlight');\n\n    // Disabilita botões de resposta\n    correta.disabled = true;\n\n    // Adiciona estilo para as alternativas incorretas\n    const incorretas = document.querySelectorAll('.incorrect-answer');\n    incorretas.forEach((el) => {\n      el.classList.add('incorrect-highlight');\n\n      // Disabilita botões de resposta\n      el.disabled = true;\n    });\n  }\n\n  sendScoreToLocalStorage(target) {\n    if (target.id === 'correct-answer') {\n      // Obtendo dados\n      const { timer, scoreDispatch } = this.props;\n      // = this.state utilizar o timer do state;\n      const { game, questionNumber } = this.props;\n      const { difficulty } = game[questionNumber];\n      // Utilizando variaveis de controle\n      const obj = { hard: 3, medium: 2, easy: 1 };\n      let valor;\n      switch (difficulty) {\n      case 'hard':\n        valor = obj.hard;\n        break;\n      case 'medium':\n        valor = obj.medium;\n        break;\n      case 'easy':\n        valor = obj.easy;\n        break;\n      default:\n      }\n      // Obtendo dados do localStorage\n      const state = JSON.parse(localStorage.getItem('state'));\n      const defaultReward = 10;\n      state.player.score += defaultReward + valor * timer;\n      // devolvendo os dados para o localStorage\n      localStorage.setItem('state', JSON.stringify(state));\n      scoreDispatch(state.player.score);\n    }\n  }\n\n  answered({ target }) {\n    const { toggleTimerDispatch } = this.props;\n    // Desligar timer\n    toggleTimerDispatch();\n\n    // Estilos\n    this.addStyles();\n\n    // Atualizar pontuação\n    this.sendScoreToLocalStorage(target);\n    this.setAssertions(target);\n\n    // Habilitar nova pergunta\n    this.enableNextBtn();\n  }\n\n  render() {\n    const { game, questionNumber } = this.props;\n    const { category, question } = game[questionNumber];\n\n    return (\n      <section className=\"Gamepage\">\n        <HeaderGame />\n        <GameTimer\n          addStyles={ this.addStyles }\n          enableNextBtn={ this.enableNextBtn }\n        />\n        <div className=\"questions-content\">\n          <div className=\"progress\">\n            \n          </div>\n          <div className=\"question-content\">\n            <h3 data-testid=\"question-category\">\n              { category }\n            </h3>\n            <p data-testid=\"question-text\">\n              { decodeHtml(question) }\n            </p>\n          </div>\n          <div className=\"game-answers\">\n            <GameAnswers />\n          </div>\n        </div>\n        <NextBtn setAnswers={ this.setAnswers } />\n      </section>);\n  }\n}\n\nGamepage.propTypes = {\n  playerName: PropTypes.string.isRequired,\n  playerEmail: PropTypes.string.isRequired,\n  game: PropTypes.arrayOf(PropTypes.object).isRequired, // Array de perguntas\n  questionNumber: PropTypes.number.isRequired, // Número da pergunta\n  timer: PropTypes.number.isRequired, // Número do tempo\n  setAnswersDispatch: PropTypes.func.isRequired, // Salvar respostas\n  setAssertionsDispatch: PropTypes.func.isRequired, // Salvar pontuação\n  enableNextBtnDispatch: PropTypes.func.isRequired, // Habilitar nova pergunta\n  toggleTimerDispatch: PropTypes.func.isRequired, // Ligar/Desligar timer\n  scoreDispatch: PropTypes.func.isRequired, // Ligar/Desligar timer\n};\n\nconst mapStateToProps = (state) => ({\n  game: state.game.game,\n  questionNumber: state.game.questionNumber,\n  timer: state.timer.timer,\n  playerName: state.login.nome,\n  playerEmail: state.login.email,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setAnswersDispatch: (payload) => dispatch(setAnswers(payload)),\n  setAssertionsDispatch: (payload) => dispatch(setAssertions(payload)),\n  enableNextBtnDispatch: (payload) => dispatch(pressQuestionBtn(payload)),\n  toggleTimerDispatch: () => dispatch(toggleTimer()),\n  scoreDispatch: (payload) => dispatch(setScore(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Gamepage);\n"]},"metadata":{},"sourceType":"module"}