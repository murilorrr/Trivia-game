{"ast":null,"code":"import _objectSpread from \"/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/pages/Settings.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport Loading from '../components/Loading';\nimport { getCategoriesThunk, saveSettingsActionCreator } from '../redux/actions';\nimport './Settings.css';\nconst QUESTIONS_LIMIT = 50;\n\nclass Settings extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputSettings: {\n        amount: props.amount,\n        categoryId: props.categoryId,\n        difficulty: props.difficulty\n      },\n      redirect: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          allCategories = _this$props.allCategories,\n          getCategories = _this$props.getCategories;\n    if (allCategories.length === 0) getCategories();\n  }\n\n  getQuestionCount() {\n    const allCategories = this.props.allCategories;\n    const _this$state$inputSett = this.state.inputSettings,\n          categoryId = _this$state$inputSett.categoryId,\n          difficulty = _this$state$inputSett.difficulty;\n\n    if (!categoryId) {\n      if (!difficulty) {\n        return allCategories.reduce((acc, curr) => acc + curr.questionCount.total, 0);\n      }\n\n      return allCategories.reduce((acc, curr) => acc + curr.questionCount[difficulty], 0);\n    }\n\n    const category = allCategories.find(({\n      id\n    }) => id === Number(categoryId));\n    if (!difficulty) return category.questionCount.total;\n    return category.questionCount[difficulty];\n  }\n\n  handleChange({\n    target: {\n      name,\n      value\n    }\n  }) {\n    this.setState(prevState => ({\n      inputSettings: _objectSpread({}, prevState.inputSettings, {\n        [name]: value\n      })\n    }));\n  }\n\n  renderSelectCategory() {\n    const allCategories = this.props.allCategories;\n    const categoryId = this.state.inputSettings.categoryId;\n    return React.createElement(\"label\", {\n      htmlFor: \"category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Select Category:\", React.createElement(\"select\", {\n      id: \"category\",\n      name: \"categoryId\",\n      defaultValue: categoryId,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Any Category\"), allCategories.map(category => React.createElement(\"option\", {\n      key: category.id,\n      value: category.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, category.name))));\n  }\n\n  renderSelectDifficulty() {\n    const difficulty = this.state.inputSettings.difficulty;\n    return React.createElement(\"label\", {\n      htmlFor: \"difficulty\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Select Difficulty:\", React.createElement(\"select\", {\n      id: \"difficulty\",\n      name: \"difficulty\",\n      defaultValue: difficulty,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Any Difficulty\"), React.createElement(\"option\", {\n      value: \"easy\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Easy\"), React.createElement(\"option\", {\n      value: \"medium\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Medium\"), React.createElement(\"option\", {\n      value: \"hard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Hard\")));\n  }\n\n  renderNumberOfQuestions() {\n    const amount = this.state.inputSettings.amount;\n    return React.createElement(\"label\", {\n      htmlFor: \"amount\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, `Number of Questions: ${amount}`, React.createElement(\"input\", {\n      type: \"range\",\n      id: \"amount\",\n      className: \"slider\",\n      name: \"amount\",\n      min: \"5\",\n      max: QUESTIONS_LIMIT,\n      defaultValue: amount,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }));\n  }\n\n  render() {\n    const _this$state = this.state,\n          inputSettings = _this$state.inputSettings,\n          redirect = _this$state.redirect;\n    const _this$props2 = this.props,\n          isLoading = _this$props2.isLoading,\n          saveSettings = _this$props2.saveSettings;\n    const questionCount = this.getQuestionCount();\n    const isHigher = inputSettings.amount > questionCount;\n    const warningMessage = isHigher ? 'Insufficient questions!' : '';\n    if (redirect) return React.createElement(Redirect, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    });\n    if (isLoading) return React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    });\n    return React.createElement(\"main\", {\n      id: \"settings-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Settings\"), React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"avaible-questions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"Total available Questions:\"), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, questionCount)), React.createElement(\"div\", {\n      id: \"settings\",\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, this.renderSelectCategory(), this.renderSelectDifficulty(), this.renderNumberOfQuestions(), React.createElement(\"input\", {\n      type: \"button\",\n      className: \"button-main\",\n      value: \"Save\",\n      onClick: () => {\n        saveSettings({\n          inputSettings\n        });\n        this.setState({\n          redirect: true\n        });\n      },\n      disabled: isHigher,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }))), React.createElement(\"span\", {\n      className: \"warning-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, warningMessage));\n  }\n\n}\n\nconst mapStateToProps = ({\n  settings\n}) => ({\n  allCategories: settings.allCategories,\n  amount: settings.amount,\n  categoryId: settings.categoryId,\n  difficulty: settings.difficulty,\n  isLoading: settings.isLoading\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getCategories: () => dispatch(getCategoriesThunk()),\n  saveSettings: payload => dispatch(saveSettingsActionCreator(payload))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);","map":{"version":3,"sources":["/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/pages/Settings.js"],"names":["React","connect","Redirect","Loading","getCategoriesThunk","saveSettingsActionCreator","QUESTIONS_LIMIT","Settings","Component","constructor","props","state","inputSettings","amount","categoryId","difficulty","redirect","handleChange","bind","componentDidMount","allCategories","getCategories","length","getQuestionCount","reduce","acc","curr","questionCount","total","category","find","id","Number","target","name","value","setState","prevState","renderSelectCategory","map","renderSelectDifficulty","renderNumberOfQuestions","render","isLoading","saveSettings","isHigher","warningMessage","mapStateToProps","settings","mapDispatchToProps","dispatch","payload"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\n\nimport Loading from '../components/Loading';\nimport {\n  getCategoriesThunk,\n  saveSettingsActionCreator,\n} from '../redux/actions';\nimport './Settings.css';\n\nconst QUESTIONS_LIMIT = 50;\n\nclass Settings extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      inputSettings: {\n        amount: props.amount,\n        categoryId: props.categoryId,\n        difficulty: props.difficulty,\n      },\n      redirect: false,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    const { allCategories, getCategories } = this.props;\n    if (allCategories.length === 0) getCategories();\n  }\n\n  getQuestionCount() {\n    const { allCategories } = this.props;\n    const { inputSettings: { categoryId, difficulty } } = this.state;\n\n    if (!categoryId) {\n      if (!difficulty) {\n        return allCategories.reduce(\n          (acc, curr) => acc + curr.questionCount.total,\n          0,\n        );\n      }\n      return allCategories.reduce(\n        (acc, curr) => acc + curr.questionCount[difficulty],\n        0,\n      );\n    }\n\n    const category = allCategories.find(({ id }) => id === Number(categoryId));\n\n    if (!difficulty) return category.questionCount.total;\n    return category.questionCount[difficulty];\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState((prevState) => ({\n      inputSettings: {\n        ...prevState.inputSettings,\n        [name]: value,\n      },\n    }));\n  }\n\n  renderSelectCategory() {\n    const { allCategories } = this.props;\n    const { inputSettings: { categoryId } } = this.state;\n\n    return (\n      <label htmlFor=\"category\">\n        Select Category:\n        <select\n          id=\"category\"\n          name=\"categoryId\"\n          defaultValue={ categoryId }\n          onChange={ this.handleChange }\n        >\n          <option value=\"\">Any Category</option>\n          {allCategories.map((category) => (\n            <option key={ category.id } value={ category.id }>\n              {category.name}\n            </option>\n          ))}\n        </select>\n      </label>\n    );\n  }\n\n  renderSelectDifficulty() {\n    const { inputSettings: { difficulty } } = this.state;\n\n    return (\n      <label htmlFor=\"difficulty\">\n        Select Difficulty:\n        <select\n          id=\"difficulty\"\n          name=\"difficulty\"\n          defaultValue={ difficulty }\n          onChange={ this.handleChange }\n        >\n          <option value=\"\">Any Difficulty</option>\n          <option value=\"easy\">Easy</option>\n          <option value=\"medium\">Medium</option>\n          <option value=\"hard\">Hard</option>\n        </select>\n      </label>\n    );\n  }\n\n  renderNumberOfQuestions() {\n    const { inputSettings: { amount } } = this.state;\n\n    return (\n      <label htmlFor=\"amount\">\n        { `Number of Questions: ${amount}` }\n        <input\n          type=\"range\"\n          id=\"amount\"\n          className=\"slider\"\n          name=\"amount\"\n          min=\"5\"\n          max={ QUESTIONS_LIMIT }\n          defaultValue={ amount }\n          onChange={ this.handleChange }\n        />\n      </label>\n    );\n  }\n\n  render() {\n    const { inputSettings, redirect } = this.state;\n    const { isLoading, saveSettings } = this.props;\n\n    const questionCount = this.getQuestionCount();\n    const isHigher = inputSettings.amount > questionCount;\n    const warningMessage = isHigher ? 'Insufficient questions!' : '';\n\n    if (redirect) return <Redirect to=\"/\" />;\n    if (isLoading) return <Loading />;\n\n    return (\n      <main id=\"settings-page\">\n        <h1>Settings</h1>\n        <section>\n          <div id=\"avaible-questions\">\n            <span>Total available Questions:</span>\n            <span>{questionCount}</span>\n          </div>\n          <div id=\"settings\" className=\"container\">\n            {this.renderSelectCategory()}\n            {this.renderSelectDifficulty()}\n            {this.renderNumberOfQuestions()}\n            <input\n              type=\"button\"\n              className=\"button-main\"\n              value=\"Save\"\n              onClick={ () => {\n                saveSettings({ inputSettings });\n                this.setState({ redirect: true });\n              } }\n              disabled={ isHigher }\n            />\n          </div>\n        </section>\n        <span className=\"warning-message\">{ warningMessage }</span>\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = ({ settings }) => ({\n  allCategories: settings.allCategories,\n  amount: settings.amount,\n  categoryId: settings.categoryId,\n  difficulty: settings.difficulty,\n  isLoading: settings.isLoading,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCategories: () => dispatch(getCategoriesThunk()),\n  saveSettings: (payload) => dispatch(saveSettingsActionCreator(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);"]},"metadata":{},"sourceType":"module"}