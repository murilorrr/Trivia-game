{"ast":null,"code":"var _jsxFileName = \"/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/components/GameBoard.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nclass GameBoard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      seconds: 30,\n      options: []\n    };\n    this.cronometer = this.cronometer.bind(this);\n    this.resetCronometer = this.resetCronometer.bind(this);\n    this.shuffleOptions = this.shuffleOptions.bind(this);\n  }\n\n  componentDidMount() {\n    this.cronometer();\n    this.shuffleOptions();\n  }\n\n  componentDidUpdate(prevProps) {\n    const seconds = this.state.seconds;\n    const ZERO_SECOND = 0;\n\n    if (seconds === ZERO_SECOND) {\n      this.resetCronometer();\n    }\n\n    if (prevProps !== this.props) {\n      this.shuffleOptions();\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  cronometer() {\n    const ONE_SECOND = 1000;\n    this.intervalID = setInterval(() => {\n      this.setState(prevState => ({\n        seconds: prevState.seconds - 1\n      }));\n    }, ONE_SECOND);\n  }\n\n  resetCronometer() {\n    this.setState({\n      seconds: 'ACABOU O TEMPO!'\n    });\n    const btns = document.getElementsByName('options');\n    btns.forEach(btn => {\n      btn.disabled = true;\n    });\n    document.querySelector('.btn-next').classList.remove('invisible');\n    clearInterval(this.intervalID);\n  }\n\n  decode(str) {\n    const textArea = document.createElement('textarea');\n    textArea.innerHTML = str;\n    return textArea.value;\n  }\n\n  shuffleOptions() {\n    const _this$props = this.props,\n          onSelect = _this$props.onSelect,\n          question = _this$props.question;\n    const correctOption = question.correct_answer,\n          incorrectOptions = question.incorrect_answers;\n    const optionsArray = [...incorrectOptions, correctOption];\n\n    for (let i = optionsArray.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n      var _ref = [optionsArray[j], optionsArray[i]];\n      optionsArray[i] = _ref[0];\n      optionsArray[j] = _ref[1];\n    }\n\n    const allOptions = optionsArray.map(opt => React.createElement(\"button\", {\n      key: opt,\n      type: \"button\",\n      className: opt === correctOption ? 'dev-correct' : null,\n      \"data-testid\": opt === correctOption ? 'correct-answer' : `wrong-answer-${incorrectOptions.indexOf(opt)}`,\n      name: \"options\",\n      value: opt,\n      onClick: ({\n        target\n      }) => {\n        const seconds = this.state.seconds;\n        clearInterval(this.intervalID);\n        onSelect(question, target, seconds);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, this.decode(opt)));\n    this.setState({\n      options: allOptions\n    });\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          question = _this$props2.question,\n          onNext = _this$props2.onNext;\n    const _this$state = this.state,\n          seconds = _this$state.seconds,\n          options = _this$state.options;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, seconds, React.createElement(\"h3\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, question.category), React.createElement(\"h4\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, this.decode(question.question))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, options, React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-next\",\n      className: \"btn-next invisible\",\n      onClick: onNext,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Pr\\xF3xima\")));\n  }\n\n}\n\nexport default GameBoard;\nGameBoard.propTypes = {\n  question: PropTypes.shape({\n    category: PropTypes.string,\n    type: PropTypes.string,\n    difficulty: PropTypes.string,\n    question: PropTypes.string,\n    correct_answer: PropTypes.string,\n    incorrect_answers: PropTypes.arrayOf(PropTypes.string)\n  }).isRequired,\n  onSelect: PropTypes.func.isRequired,\n  onNext: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/components/GameBoard.js"],"names":["React","PropTypes","GameBoard","Component","constructor","props","state","seconds","options","cronometer","bind","resetCronometer","shuffleOptions","componentDidMount","componentDidUpdate","prevProps","ZERO_SECOND","componentWillUnmount","clearInterval","intervalID","ONE_SECOND","setInterval","setState","prevState","btns","document","getElementsByName","forEach","btn","disabled","querySelector","classList","remove","decode","str","textArea","createElement","innerHTML","value","onSelect","question","correctOption","correct_answer","incorrectOptions","incorrect_answers","optionsArray","i","length","j","Math","floor","random","allOptions","map","opt","indexOf","target","render","onNext","category","propTypes","shape","string","type","difficulty","arrayOf","isRequired","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass GameBoard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      seconds: 30,\n      options: [],\n    };\n    this.cronometer = this.cronometer.bind(this);\n    this.resetCronometer = this.resetCronometer.bind(this);\n    this.shuffleOptions = this.shuffleOptions.bind(this);\n  }\n\n  componentDidMount() {\n    this.cronometer();\n    this.shuffleOptions();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { seconds } = this.state;\n    const ZERO_SECOND = 0;\n    if (seconds === ZERO_SECOND) {\n      this.resetCronometer();\n    }\n    if (prevProps !== this.props) {\n      this.shuffleOptions();\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  cronometer() {\n    const ONE_SECOND = 1000;\n    this.intervalID = setInterval(() => {\n      this.setState((prevState) => ({ seconds: prevState.seconds - 1 }));\n    }, ONE_SECOND);\n  }\n\n  resetCronometer() {\n    this.setState({\n      seconds: 'ACABOU O TEMPO!',\n    });\n    const btns = document.getElementsByName('options');\n    btns.forEach((btn) => {\n      btn.disabled = true;\n    });\n    document.querySelector('.btn-next').classList.remove('invisible');\n    clearInterval(this.intervalID);\n  }\n\n  decode(str) {\n    const textArea = document.createElement('textarea');\n    textArea.innerHTML = str;\n    return textArea.value;\n  }\n\n  shuffleOptions() {\n    const { onSelect, question } = this.props;\n    const { correct_answer: correctOption,\n      incorrect_answers: incorrectOptions } = question;\n\n    const optionsArray = [...incorrectOptions, correctOption];\n    for (let i = optionsArray.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [optionsArray[i], optionsArray[j]] = [optionsArray[j], optionsArray[i]];\n    }\n    const allOptions = optionsArray.map((opt) => (\n      <button\n        key={ opt }\n        type=\"button\"\n        className={ opt === correctOption ? 'dev-correct' : null }\n        data-testid={ opt === correctOption ? 'correct-answer'\n          : `wrong-answer-${incorrectOptions.indexOf(opt)}` }\n        name=\"options\"\n        value={ opt }\n        onClick={ ({ target }) => {\n          const { seconds } = this.state;\n          clearInterval(this.intervalID);\n          onSelect(question, target, seconds);\n        } }\n      >\n        { this.decode(opt) }\n      </button>\n    ));\n    this.setState({ options: allOptions });\n  }\n\n  render() {\n    const { question, onNext } = this.props;\n    const { seconds, options } = this.state;\n    return (\n      <div>\n        <div>\n          {seconds}\n          <h3 data-testid=\"question-category\">{ question.category }</h3>\n          <h4 data-testid=\"question-text\">{ this.decode(question.question) }</h4>\n        </div>\n        <div>\n          {options}\n          <button\n            type=\"button\"\n            data-testid=\"btn-next\"\n            className=\"btn-next invisible\"\n            onClick={ onNext }\n          >\n            Próxima\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GameBoard;\n\nGameBoard.propTypes = {\n  question: PropTypes.shape({\n    category: PropTypes.string,\n    type: PropTypes.string,\n    difficulty: PropTypes.string,\n    question: PropTypes.string,\n    correct_answer: PropTypes.string,\n    incorrect_answers: PropTypes.arrayOf(PropTypes.string),\n  }).isRequired,\n  onSelect: PropTypes.func.isRequired,\n  onNext: PropTypes.func.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}