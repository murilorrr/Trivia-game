{"ast":null,"code":"var _jsxFileName = \"/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/components/GameTimer.jsx\";\n// React\nimport React, { Component } from 'react'; // PropTypes\n\nimport PropTypes from 'prop-types'; // Redux\n\nimport { connect } from 'react-redux';\nimport { toggleTimer, setTimerGlobal } from '../redux/actions/timer';\n\nclass GameTimer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timeLeft: 30 // segundos\n\n    };\n  }\n  /* As funções a seguir estão relacionadas com os eventos do timer */\n\n\n  componentDidMount() {\n    const interval = 50;\n    window.setInterval(() => this.checkTimerStatus(), interval);\n  }\n\n  checkTimerStatus() {\n    const timerOn = this.props.timerOn;\n    if (timerOn) this.tick();else this.reset();\n  }\n\n  tick() {\n    const timeLeft = this.state.timeLeft;\n    const timerDispatch = this.props.timerDispatch;\n\n    if (timeLeft > 0) {\n      this.setState(prev => ({\n        timeLeft: prev.timeLeft - 0.05\n      }), () => timerDispatch(timeLeft));\n    } else {\n      this.timesUp();\n    }\n  }\n\n  reset() {\n    this.setState({\n      timeLeft: 30\n    });\n  }\n\n  timesUp() {\n    const _this$props = this.props,\n          addStyles = _this$props.addStyles,\n          enableNextBtn = _this$props.enableNextBtn,\n          toggleTimerDispatch = _this$props.toggleTimerDispatch; // Desligar timer\n\n    toggleTimerDispatch(); // Disabilitar os botões de resposta\n\n    addStyles(); // Habilitar nova pergunta\n\n    enableNextBtn();\n  }\n\n  render() {\n    const timeLeft = this.state.timeLeft;\n    return React.createElement(\"span\", {\n      style: {\n        display: 'none'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, timeLeft);\n  }\n\n}\n\nGameTimer.propTypes = {\n  timerOn: PropTypes.bool.isRequired,\n  addStyles: PropTypes.func.isRequired,\n  enableNextBtn: PropTypes.func.isRequired,\n  timerDispatch: PropTypes.func.isRequired,\n  toggleTimerDispatch: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = store => ({\n  timerOn: store.timer.timerOn\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleTimerDispatch: () => dispatch(toggleTimer()),\n  timerDispatch: payload => dispatch(setTimerGlobal(payload))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameTimer);","map":{"version":3,"sources":["/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/components/GameTimer.jsx"],"names":["React","Component","PropTypes","connect","toggleTimer","setTimerGlobal","GameTimer","constructor","props","state","timeLeft","componentDidMount","interval","window","setInterval","checkTimerStatus","timerOn","tick","reset","timerDispatch","setState","prev","timesUp","addStyles","enableNextBtn","toggleTimerDispatch","render","display","propTypes","bool","isRequired","func","mapStateToProps","store","timer","mapDispatchToProps","dispatch","payload"],"mappings":"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","sourcesContent":["// React\nimport React, { Component } from 'react';\n\n// PropTypes\nimport PropTypes from 'prop-types';\n\n// Redux\nimport { connect } from 'react-redux';\nimport { toggleTimer, setTimerGlobal } from '../redux/actions/timer';\n\nclass GameTimer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      timeLeft: 30, // segundos\n    };\n  }\n\n  /* As funções a seguir estão relacionadas com os eventos do timer */\n  componentDidMount() {\n    const interval = 50;\n    window.setInterval(\n      () => this.checkTimerStatus(),\n      interval,\n    );\n  }\n\n  checkTimerStatus() {\n    const { timerOn } = this.props;\n\n    if (timerOn) this.tick();\n    else this.reset();\n  }\n\n  tick() {\n    const { timeLeft } = this.state;\n    const { timerDispatch } = this.props;\n\n    if (timeLeft > 0) {\n      this.setState((prev) => ({\n        timeLeft: prev.timeLeft - 0.05,\n      }), () => timerDispatch(timeLeft));\n    } else {\n      this.timesUp();\n    }\n  }\n\n  reset() {\n    this.setState({ timeLeft: 30 });\n  }\n\n  timesUp() {\n    const {\n      addStyles,\n      enableNextBtn,\n      toggleTimerDispatch,\n    } = this.props;\n    // Desligar timer\n    toggleTimerDispatch();\n\n    // Disabilitar os botões de resposta\n    addStyles();\n\n    // Habilitar nova pergunta\n    enableNextBtn();\n  }\n\n  render() {\n    const { timeLeft } = this.state;\n    return (\n      <span style={ { display: 'none' } }>{ timeLeft }</span>\n    );\n  }\n}\n\nGameTimer.propTypes = {\n  timerOn: PropTypes.bool.isRequired,\n  addStyles: PropTypes.func.isRequired,\n  enableNextBtn: PropTypes.func.isRequired,\n  timerDispatch: PropTypes.func.isRequired,\n  toggleTimerDispatch: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (store) => ({\n  timerOn: store.timer.timerOn,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  toggleTimerDispatch: () => dispatch(toggleTimer()),\n  timerDispatch: (payload) => dispatch(setTimerGlobal(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameTimer);\n"]},"metadata":{},"sourceType":"module"}