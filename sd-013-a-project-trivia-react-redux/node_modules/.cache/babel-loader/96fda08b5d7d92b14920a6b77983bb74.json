{"ast":null,"code":"var _jsxFileName = \"/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/pages/Feedback.jsx\";\n// React\nimport React, { Component } from 'react'; // PropTypes\n\nimport PropTypes from 'prop-types'; // Redux\n\nimport { connect } from 'react-redux'; // Services\n\nimport getGravatar from '../services/gravatarAPI'; // Children\n\nimport { HeaderGame, PlayAgain, ViewRanking } from '../components';\nimport '../styles/Feedback.css';\n\nclass Feedback extends Component {\n  constructor(props) {\n    super(props);\n    this.renderMessage = this.renderMessage.bind(this);\n    this.renderFeedbackQuestion = this.renderFeedbackQuestion.bind(this);\n  }\n\n  componentDidMount() {\n    const stateStorage = localStorage.getItem('state');\n    const stateJson = JSON.parse(stateStorage);\n    const _stateJson$player = stateJson.player,\n          gravatarEmail = _stateJson$player.gravatarEmail,\n          name = _stateJson$player.name,\n          score = _stateJson$player.score;\n    const rankingStorage = localStorage.getItem('ranking');\n    const rankingJson = JSON.parse(rankingStorage);\n    const objRanking = {\n      name,\n      score,\n      picture: getGravatar(gravatarEmail)\n    };\n    const arrayRanking = [];\n\n    if (rankingJson) {\n      arrayRanking.push(...rankingJson);\n    }\n\n    arrayRanking.push(objRanking);\n    localStorage.setItem('ranking', JSON.stringify(arrayRanking));\n  }\n\n  renderMessage() {\n    const assertions = this.props.assertions;\n    const three = 3;\n\n    if (assertions < three) {\n      return 'Podia ser melhor...';\n    }\n\n    return 'Mandou bem!';\n  }\n\n  renderFeedbackQuestion() {\n    const assertions = this.props.assertions;\n    return React.createElement(\"span\", {\n      \"data-testid\": \"feedback-total-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, assertions);\n  }\n\n  render() {\n    const score = this.props.score;\n    return React.createElement(\"section\", {\n      className: \"feedback-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(HeaderGame, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"feedback-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      \"data-testid\": \"feedback-text\",\n      className: \"feedback-text info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, this.renderMessage()), React.createElement(\"div\", {\n      \"data-testid\": \"feedback-total-score\",\n      className: \"info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, score), React.createElement(\"div\", {\n      className: \"feedback-total-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Voce acertou\", ' ', this.renderFeedbackQuestion(), ' ', \"quest\\xF5es!\")), React.createElement(\"div\", {\n      className: \"feedback-btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(PlayAgain, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(ViewRanking, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })));\n  }\n\n}\n\nFeedback.propTypes = {\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired\n};\n\nconst mapStateToProps = store => ({\n  assertions: store.game.assertions,\n  // Número de acertos\n  score: store.header.score\n});\n\nexport default connect(mapStateToProps, null)(Feedback);","map":{"version":3,"sources":["/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/pages/Feedback.jsx"],"names":["React","Component","PropTypes","connect","getGravatar","HeaderGame","PlayAgain","ViewRanking","Feedback","constructor","props","renderMessage","bind","renderFeedbackQuestion","componentDidMount","stateStorage","localStorage","getItem","stateJson","JSON","parse","player","gravatarEmail","name","score","rankingStorage","rankingJson","objRanking","picture","arrayRanking","push","setItem","stringify","assertions","three","render","propTypes","number","isRequired","mapStateToProps","store","game","header"],"mappings":"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","sourcesContent":["// React\nimport React, { Component } from 'react';\n\n// PropTypes\nimport PropTypes from 'prop-types';\n\n// Redux\nimport { connect } from 'react-redux';\n\n// Services\nimport getGravatar from '../services/gravatarAPI';\n\n// Children\nimport { HeaderGame, PlayAgain, ViewRanking } from '../components';\n\nimport '../styles/Feedback.css';\n\nclass Feedback extends Component {\n  constructor(props) {\n    super(props);\n\n    this.renderMessage = this.renderMessage.bind(this);\n    this.renderFeedbackQuestion = this.renderFeedbackQuestion.bind(this);\n  }\n\n  componentDidMount() {\n    const stateStorage = localStorage.getItem('state');\n    const stateJson = JSON.parse(stateStorage);\n    const { player: { gravatarEmail, name, score } } = stateJson;\n    const rankingStorage = localStorage.getItem('ranking');\n    const rankingJson = JSON.parse(rankingStorage);\n    const objRanking = {\n      name,\n      score,\n      picture: getGravatar(gravatarEmail),\n    };\n    const arrayRanking = [];\n    if (rankingJson) {\n      arrayRanking.push(...rankingJson);\n    }\n    arrayRanking.push(objRanking);\n    localStorage.setItem('ranking', JSON.stringify(arrayRanking));\n  }\n\n  renderMessage() {\n    const { assertions } = this.props;\n    const three = 3;\n    if (assertions < three) {\n      return 'Podia ser melhor...';\n    }\n    return 'Mandou bem!';\n  }\n\n  renderFeedbackQuestion() {\n    const { assertions } = this.props;\n    return <span data-testid=\"feedback-total-question\">{assertions}</span>;\n  }\n\n  render() {\n    const { score } = this.props;\n    return (\n      <section className=\"feedback-section\">\n        <HeaderGame />\n        <div className=\"feedback-content\">\n          <div data-testid=\"feedback-text\" className=\"feedback-text info\">\n            { this.renderMessage() }\n          </div>\n          <div data-testid=\"feedback-total-score\" className=\"info\">\n            { score }\n          </div>\n          <div className=\"feedback-total-question\">\n            Voce acertou\n            {' '}\n            { this.renderFeedbackQuestion() }\n            {' '}\n            questões!\n          </div>\n        </div>\n        <div className=\"feedback-btn\">\n          <PlayAgain />\n          <ViewRanking />\n        </div>\n      </section>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (store) => ({\n  assertions: store.game.assertions, // Número de acertos\n  score: store.header.score,\n});\n\nexport default connect(mapStateToProps, null)(Feedback);\n"]},"metadata":{},"sourceType":"module"}