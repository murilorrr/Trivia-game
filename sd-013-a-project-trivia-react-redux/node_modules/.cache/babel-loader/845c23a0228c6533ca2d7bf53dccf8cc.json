{"ast":null,"code":"var _jsxFileName = \"/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/pages/Login.js\";\n// React\nimport React from 'react'; // PropTypes\n\nimport PropTypes from 'prop-types'; // Redux\n\nimport { connect } from 'react-redux';\nimport validateLogin from '../redux/actions/validateLogin'; // Services\n\nimport apiTrivia from '../helpers/apiTrivia';\nimport { putTokenInLocalStorage } from '../helpers/servicesAPI';\nimport { setGameInfo } from '../redux/actions/game';\nconst regexEmail = /^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i;\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.submitLogin = this.submitLogin.bind(this);\n    this.openSettings = this.openSettings.bind(this);\n    this.state = {\n      nome: '',\n      email: ''\n    };\n  }\n\n  async setQuestions() {\n    const dispatchGameInfo = this.props.dispatchGameInfo;\n    const token = localStorage.getItem('token') || '';\n    await apiTrivia(token).then(results => dispatchGameInfo(results)); // Redirecionar para a tela de jogo\n\n    const history = this.props.history;\n    history.push('/game');\n  }\n\n  handleChange({\n    target: {\n      name,\n      value\n    }\n  }) {\n    this.setState({\n      [name]: value\n    });\n  }\n\n  async submitLogin() {\n    // Guardar login na store\n    const dispatchValidateLogin = this.props.dispatchValidateLogin;\n    const _this$state = this.state,\n          nome = _this$state.nome,\n          email = _this$state.email;\n    await dispatchValidateLogin({\n      nome,\n      email\n    }); // Guardar token no local storage\n\n    putTokenInLocalStorage(); // Guardar as informações de jogo na store\n\n    await this.setQuestions();\n  }\n\n  openSettings() {\n    const history = this.props.history;\n    history.push('/settings');\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          nome = _this$state2.nome,\n          email = _this$state2.email;\n    const statusButton = !(regexEmail.test(email) && nome.length > 0);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"name-input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Nome:\", React.createElement(\"input\", {\n      type: \"text\",\n      id: \"name-input\",\n      \"data-testid\": \"input-player-name\",\n      name: \"nome\",\n      value: nome,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      htmlFor: \"email-input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Email:\", React.createElement(\"input\", {\n      type: \"text\",\n      id: \"email-input\",\n      \"data-testid\": \"input-gravatar-email\",\n      name: \"email\",\n      value: email,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      disabled: statusButton,\n      type: \"button\",\n      \"data-testid\": \"btn-play\",\n      onClick: this.submitLogin,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Jogar\"), React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-settings\",\n      onClick: this.openSettings,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Configura\\xE7\\xF5es\"));\n  }\n\n}\n\nLogin.propTypes = {\n  dispatchValidateLogin: PropTypes.func.isRequired,\n  dispatchGameInfo: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired\n  }).isRequired\n};\n\nmapStateToProps = state => ({\n  numberOfQuestions: state.numberOfQuestions,\n  category: state.category,\n  difficult: state.difficult\n});\n\nconst mapStateToProps = store => ({\n  assertions: store.game.assertions,\n  // Número de acertos\n  score: store.header.score\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchValidateLogin: value => dispatch(validateLogin(value)),\n  dispatchGameInfo: value => dispatch(setGameInfo(value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/pages/Login.js"],"names":["React","PropTypes","connect","validateLogin","apiTrivia","putTokenInLocalStorage","setGameInfo","regexEmail","Login","Component","constructor","props","handleChange","bind","submitLogin","openSettings","state","nome","email","setQuestions","dispatchGameInfo","token","localStorage","getItem","then","results","history","push","target","name","value","setState","dispatchValidateLogin","render","statusButton","test","length","propTypes","func","isRequired","shape","mapStateToProps","numberOfQuestions","category","difficult","store","assertions","game","score","header","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["// React\nimport React from 'react';\n\n// PropTypes\nimport PropTypes from 'prop-types';\n\n// Redux\nimport { connect } from 'react-redux';\nimport validateLogin from '../redux/actions/validateLogin';\n\n// Services\nimport apiTrivia from '../helpers/apiTrivia';\nimport { putTokenInLocalStorage } from '../helpers/servicesAPI';\nimport { setGameInfo } from '../redux/actions/game';\n\nconst regexEmail = /^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i;\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.submitLogin = this.submitLogin.bind(this);\n    this.openSettings = this.openSettings.bind(this);\n\n    this.state = {\n      nome: '',\n      email: '',\n    };\n  }\n\n  async setQuestions() {\n    const { dispatchGameInfo } = this.props;\n    const token = localStorage.getItem('token') || '';\n\n    await apiTrivia(token)\n      .then((results) => dispatchGameInfo(results));\n\n    // Redirecionar para a tela de jogo\n    const { history } = this.props;\n    history.push('/game');\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({ [name]: value });\n  }\n\n  async submitLogin() {\n    // Guardar login na store\n    const { dispatchValidateLogin } = this.props;\n    const { nome, email } = this.state;\n    await dispatchValidateLogin({ nome, email });\n\n    // Guardar token no local storage\n    putTokenInLocalStorage();\n\n    // Guardar as informações de jogo na store\n    await this.setQuestions();\n  }\n\n  openSettings() {\n    const { history } = this.props;\n    history.push('/settings');\n  }\n\n  render() {\n    const { nome, email } = this.state;\n    const statusButton = !(regexEmail.test(email) && nome.length > 0);\n    return (\n      <div>\n        <label htmlFor=\"name-input\">\n          Nome:\n          <input\n            type=\"text\"\n            id=\"name-input\"\n            data-testid=\"input-player-name\"\n            name=\"nome\"\n            value={ nome }\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"email-input\">\n          Email:\n          <input\n            type=\"text\"\n            id=\"email-input\"\n            data-testid=\"input-gravatar-email\"\n            name=\"email\"\n            value={ email }\n            onChange={ this.handleChange }\n          />\n        </label>\n        <button\n          disabled={ statusButton }\n          type=\"button\"\n          data-testid=\"btn-play\"\n          onClick={ this.submitLogin }\n        >\n          Jogar\n        </button>\n        <button\n          type=\"button\"\n          data-testid=\"btn-settings\"\n          onClick={ this.openSettings }\n        >\n          Configurações\n        </button>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  dispatchValidateLogin: PropTypes.func.isRequired,\n  dispatchGameInfo: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nmapStateToProps = (state) => ({\n  numberOfQuestions: state.numberOfQuestions,\n  category: state.category,\n  difficult: state.difficult,\n});\n\nconst mapStateToProps = (store) => ({\n  assertions: store.game.assertions, // Número de acertos\n  score: store.header.score,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchValidateLogin: (value) => dispatch(validateLogin(value)),\n  dispatchGameInfo: (value) => dispatch(setGameInfo(value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n"]},"metadata":{},"sourceType":"module"}