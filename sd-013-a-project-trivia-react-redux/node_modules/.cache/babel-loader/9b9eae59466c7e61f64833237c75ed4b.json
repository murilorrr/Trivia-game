{"ast":null,"code":"var _jsxFileName = \"/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/components/GameBoard/index.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport style from './GameBoard.module.css';\nimport { decode, resetButtons, shuffleOptions } from './helpers';\n\nclass GameBoard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      seconds: 30,\n      options: []\n    };\n    this.cronometer = this.cronometer.bind(this);\n    this.resetCronometer = this.resetCronometer.bind(this);\n    this.shuffleOptions = this.shuffleOptions.bind(this);\n  }\n\n  componentDidMount() {\n    this.cronometer();\n    this.shuffleOptions();\n  }\n\n  componentDidUpdate(prevProps) {\n    const seconds = this.state.seconds;\n    const ZERO_SECOND = 0;\n\n    if (seconds === ZERO_SECOND) {\n      this.resetCronometer();\n    }\n\n    if (prevProps !== this.props) {\n      this.cronometer();\n      this.shuffleOptions();\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  cronometer() {\n    const ONE_SECOND = 1000;\n    this.intervalID = setInterval(() => {\n      this.setState(prevState => ({\n        seconds: prevState.seconds - 1\n      }));\n    }, ONE_SECOND);\n  }\n\n  resetCronometer() {\n    this.setState({\n      seconds: 'ACABOU O TEMPO!'\n    }, () => {\n      resetButtons('options', '.btn-next');\n      clearInterval(this.intervalID);\n    });\n  }\n\n  shuffleOptions() {\n    const _this$props = this.props,\n          onSelect = _this$props.onSelect,\n          question = _this$props.question;\n    const correctOption = question.correct_answer,\n          incorrectOptions = question.incorrect_answers;\n    this.setState({\n      seconds: 30\n    }, () => {\n      const optionsArray = shuffleOptions([...incorrectOptions, correctOption]);\n      const allOptions = optionsArray.map(opt => React.createElement(\"button\", {\n        key: opt,\n        type: \"button\",\n        \"data-testid\": opt === correctOption ? 'correct-answer' : `wrong-answer-${incorrectOptions.indexOf(opt)}`,\n        name: \"options\",\n        value: opt,\n        onClick: ({\n          target\n        }) => {\n          const seconds = this.state.seconds;\n          clearInterval(this.intervalID);\n          onSelect(question, target, seconds);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, decode(opt)));\n      this.setState({\n        options: allOptions\n      });\n    });\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          question = _this$props2.question,\n          onNext = _this$props2.onNext;\n    const _this$state = this.state,\n          seconds = _this$state.seconds,\n          options = _this$state.options;\n    return React.createElement(\"section\", {\n      className: style.section,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"article\", {\n      className: style.question,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, question.category), React.createElement(\"h4\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, decode(question.question))), React.createElement(\"article\", {\n      className: style.options,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, options), React.createElement(\"article\", {\n      className: style.time,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, seconds), React.createElement(\"article\", {\n      className: style.next,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-next\",\n      className: \"btn-next invisible\",\n      onClick: onNext,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Pr\\xF3xima Pergunta\")));\n  }\n\n}\n\nexport default GameBoard;\nGameBoard.propTypes = {\n  question: PropTypes.shape({\n    category: PropTypes.string,\n    type: PropTypes.string,\n    difficulty: PropTypes.string,\n    question: PropTypes.string,\n    correct_answer: PropTypes.string,\n    incorrect_answers: PropTypes.arrayOf(PropTypes.string)\n  }).isRequired,\n  onSelect: PropTypes.func.isRequired,\n  onNext: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/components/GameBoard/index.js"],"names":["React","PropTypes","style","decode","resetButtons","shuffleOptions","GameBoard","Component","constructor","props","state","seconds","options","cronometer","bind","resetCronometer","componentDidMount","componentDidUpdate","prevProps","ZERO_SECOND","componentWillUnmount","clearInterval","intervalID","ONE_SECOND","setInterval","setState","prevState","onSelect","question","correctOption","correct_answer","incorrectOptions","incorrect_answers","optionsArray","allOptions","map","opt","indexOf","target","render","onNext","section","category","time","next","propTypes","shape","string","type","difficulty","arrayOf","isRequired","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport style from './GameBoard.module.css';\nimport { decode, resetButtons, shuffleOptions } from './helpers';\n\nclass GameBoard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      seconds: 30,\n      options: [],\n    };\n    this.cronometer = this.cronometer.bind(this);\n    this.resetCronometer = this.resetCronometer.bind(this);\n    this.shuffleOptions = this.shuffleOptions.bind(this);\n  }\n\n  componentDidMount() {\n    this.cronometer();\n    this.shuffleOptions();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { seconds } = this.state;\n    const ZERO_SECOND = 0;\n    if (seconds === ZERO_SECOND) {\n      this.resetCronometer();\n    }\n    if (prevProps !== this.props) {\n      this.cronometer();\n      this.shuffleOptions();\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  cronometer() {\n    const ONE_SECOND = 1000;\n\n    this.intervalID = setInterval(() => {\n      this.setState((prevState) => ({ seconds: prevState.seconds - 1 }));\n    }, ONE_SECOND);\n  }\n\n  resetCronometer() {\n    this.setState({\n      seconds: 'ACABOU O TEMPO!',\n    }, () => {\n      resetButtons('options', '.btn-next');\n      clearInterval(this.intervalID);\n    });\n  }\n\n  shuffleOptions() {\n    const { onSelect, question } = this.props;\n    const {\n      correct_answer: correctOption,\n      incorrect_answers: incorrectOptions,\n    } = question;\n\n    this.setState({ seconds: 30 }, () => {\n      const optionsArray = shuffleOptions([...incorrectOptions, correctOption]);\n      const allOptions = optionsArray.map((opt) => (\n        <button\n          key={ opt }\n          type=\"button\"\n          data-testid={\n            opt === correctOption\n              ? 'correct-answer'\n              : `wrong-answer-${incorrectOptions.indexOf(opt)}`\n          }\n          name=\"options\"\n          value={ opt }\n          onClick={ ({ target }) => {\n            const { seconds } = this.state;\n            clearInterval(this.intervalID);\n            onSelect(question, target, seconds);\n          } }\n        >\n          {decode(opt)}\n        </button>\n      ));\n      this.setState({ options: allOptions });\n    });\n  }\n\n  render() {\n    const { question, onNext } = this.props;\n    const { seconds, options } = this.state;\n    return (\n      <section className={ style.section }>\n        <article className={ style.question }>\n          <h3 data-testid=\"question-category\">{question.category}</h3>\n          <h4 data-testid=\"question-text\">{decode(question.question)}</h4>\n        </article>\n        <article className={ style.options }>{options}</article>\n        <article className={ style.time }>{seconds}</article>\n        <article className={ style.next }>\n          <button\n            type=\"button\"\n            data-testid=\"btn-next\"\n            className=\"btn-next invisible\"\n            onClick={ onNext }\n          >\n            Próxima Pergunta\n          </button>\n        </article>\n      </section>\n    );\n  }\n}\n\nexport default GameBoard;\n\nGameBoard.propTypes = {\n  question: PropTypes.shape({\n    category: PropTypes.string,\n    type: PropTypes.string,\n    difficulty: PropTypes.string,\n    question: PropTypes.string,\n    correct_answer: PropTypes.string,\n    incorrect_answers: PropTypes.arrayOf(PropTypes.string),\n  }).isRequired,\n  onSelect: PropTypes.func.isRequired,\n  onNext: PropTypes.func.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}