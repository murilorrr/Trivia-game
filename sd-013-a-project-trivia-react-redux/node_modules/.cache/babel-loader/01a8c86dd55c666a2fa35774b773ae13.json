{"ast":null,"code":"var _jsxFileName = \"/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/pages/Game/index.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Header from '../../components/Header';\nimport { getQuestions, updateScore } from '../../redux/actions';\nimport { GameBoard } from '../../components';\nimport './Game.css';\nimport style from './Game.module.css';\nimport { handleScore, handleSelectButtons, resetQuestions } from './helpers';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      redirect: false,\n      qIndex: 0\n    };\n    this.handleSelect = this.handleSelect.bind(this);\n    this.handleNext = this.handleNext.bind(this);\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          getQs = _this$props.getQs,\n          token = _this$props.token;\n    getQs(token);\n  }\n\n  handleNext() {\n    const qIndex = this.state.qIndex;\n    const questions = this.props.questions;\n    return qIndex < questions.length - 1 ? this.setState(state => ({\n      qIndex: state.qIndex + 1\n    }), resetQuestions('options', '.btn-next')) : this.setState({\n      redirect: true\n    });\n  }\n\n  handleSelect(question, target, seconds) {\n    const updtScore = this.props.updtScore;\n    const correctOpt = question.correct_answer,\n          difficulty = question.difficulty;\n    handleSelectButtons(correctOpt, 'options', '.btn-next');\n\n    if (target.value === correctOpt) {\n      const score = handleScore(difficulty, seconds);\n      updtScore(score);\n    }\n  }\n\n  render() {\n    const _this$state = this.state,\n          redirect = _this$state.redirect,\n          qIndex = _this$state.qIndex;\n    const questions = this.props.questions;\n    if (questions.length < 1) return React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Loading...\");\n    if (redirect) return React.createElement(Redirect, {\n      to: \"/feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    });\n    return React.createElement(\"main\", {\n      className: style.main,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(GameBoard, {\n      question: questions[qIndex],\n      onSelect: this.handleSelect,\n      onNext: this.handleNext,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  token: state.userReducer.token,\n  questions: state.gameReducer.questions\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getQs: payload => dispatch(getQuestions(payload)),\n  updtScore: payload => dispatch(updateScore(payload))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\nGame.propTypes = {\n  getQs: PropTypes.func.isRequired,\n  updtScore: PropTypes.func.isRequired,\n  token: PropTypes.string.isRequired,\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired\n};","map":{"version":3,"sources":["/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/pages/Game/index.jsx"],"names":["React","Component","PropTypes","Redirect","connect","Header","getQuestions","updateScore","GameBoard","style","handleScore","handleSelectButtons","resetQuestions","Game","constructor","props","state","redirect","qIndex","handleSelect","bind","handleNext","componentDidMount","getQs","token","questions","length","setState","question","target","seconds","updtScore","correctOpt","correct_answer","difficulty","value","score","render","main","mapStateToProps","userReducer","gameReducer","mapDispatchToProps","dispatch","payload","propTypes","func","isRequired","string","arrayOf","object"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Header from '../../components/Header';\nimport { getQuestions, updateScore } from '../../redux/actions';\nimport { GameBoard } from '../../components';\nimport './Game.css';\nimport style from './Game.module.css';\nimport { handleScore, handleSelectButtons, resetQuestions } from './helpers';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      redirect: false,\n      qIndex: 0,\n    };\n\n    this.handleSelect = this.handleSelect.bind(this);\n    this.handleNext = this.handleNext.bind(this);\n  }\n\n  componentDidMount() {\n    const { getQs, token } = this.props;\n    getQs(token);\n  }\n\n  handleNext() {\n    const { qIndex } = this.state;\n    const { questions } = this.props;\n    return (qIndex < questions.length - 1)\n      ? this.setState((state) => ({ qIndex: state.qIndex + 1 }),\n        resetQuestions('options', '.btn-next'))\n      : this.setState({ redirect: true });\n  }\n\n  handleSelect(question, target, seconds) {\n    const { updtScore } = this.props;\n    const { correct_answer: correctOpt, difficulty } = question;\n    handleSelectButtons(correctOpt, 'options', '.btn-next');\n\n    if (target.value === correctOpt) {\n      const score = handleScore(difficulty, seconds);\n      updtScore(score);\n    }\n  }\n\n  render() {\n    const { redirect, qIndex } = this.state;\n    const { questions } = this.props;\n    if (questions.length < 1) return <h3>Loading...</h3>;\n    if (redirect) return <Redirect to=\"/feedback\" />;\n    return (\n      <main className={ style.main }>\n        <Header />\n        <GameBoard\n          question={ questions[qIndex] }\n          onSelect={ this.handleSelect }\n          onNext={ this.handleNext }\n        />\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  token: state.userReducer.token,\n  questions: state.gameReducer.questions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getQs: (payload) => dispatch(getQuestions(payload)),\n  updtScore: (payload) => dispatch(updateScore(payload)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n\nGame.propTypes = {\n  getQs: PropTypes.func.isRequired,\n  updtScore: PropTypes.func.isRequired,\n  token: PropTypes.string.isRequired,\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}