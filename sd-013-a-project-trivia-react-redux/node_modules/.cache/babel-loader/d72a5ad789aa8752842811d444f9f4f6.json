{"ast":null,"code":"var _jsxFileName = \"/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/pages/Login.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect, Link } from 'react-router-dom';\nimport md5 from 'crypto-js/md5';\nimport { getToken } from '../redux/actions';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      email: '',\n      shouldRedirect: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async handleSubmit(event) {\n    const dispatchLogin = this.props.dispatchLogin;\n    const _this$state = this.state,\n          name = _this$state.name,\n          email = _this$state.email;\n    event.preventDefault();\n    const gravatar = `https://www.gravatar.com/avatar/${md5(email).toString()}`;\n    await dispatchLogin({\n      name,\n      email,\n      gravatar\n    });\n    this.setState({\n      shouldRedirect: true\n    });\n  }\n\n  handleChange({\n    target: {\n      name,\n      value\n    }\n  }) {\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          name = _this$state2.name,\n          email = _this$state2.email,\n          shouldRedirect = _this$state2.shouldRedirect;\n    if (shouldRedirect) return React.createElement(Redirect, {\n      to: \"/game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    });\n    return React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      \"data-testid\": \"input-player-name\",\n      type: \"text\",\n      name: \"name\",\n      placeholder: \"Nome\",\n      value: name,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      \"data-testid\": \"input-gravatar-email\",\n      type: \"email\",\n      name: \"email\",\n      placeholder: \"Email\",\n      value: email,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      \"data-testid\": \"btn-play\",\n      disabled: name.length < 1 || email.length < 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Jogar\"), React.createElement(Link, {\n      to: \"/settings\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-settings\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Configura\\xE7\\xF5es\")));\n  }\n\n} // const mapStateToProps = (state) => ({\n// });\n\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchLogin: userInfo => dispatch(getToken(userInfo))\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\nLogin.propTypes = {\n  dispatchLogin: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/home/murilorsv21/Projects/sd-013-a-project-trivia-react-redux/src/pages/Login.jsx"],"names":["React","Component","PropTypes","connect","Redirect","Link","md5","getToken","Login","constructor","props","state","name","email","shouldRedirect","handleChange","bind","handleSubmit","event","dispatchLogin","preventDefault","gravatar","toString","setState","target","value","render","length","mapDispatchToProps","dispatch","userInfo","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect, Link } from 'react-router-dom';\nimport md5 from 'crypto-js/md5';\nimport { getToken } from '../redux/actions';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: '',\n      email: '',\n      shouldRedirect: false,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async handleSubmit(event) {\n    const { dispatchLogin } = this.props;\n    const { name, email } = this.state;\n    event.preventDefault();\n    const gravatar = `https://www.gravatar.com/avatar/${md5(email).toString()}`;\n    await dispatchLogin(({ name, email, gravatar }));\n    this.setState({\n      shouldRedirect: true,\n    });\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    const { name, email, shouldRedirect } = this.state;\n    if (shouldRedirect) return <Redirect to=\"/game\" />;\n\n    return (\n      <form onSubmit={ this.handleSubmit }>\n        <input\n          data-testid=\"input-player-name\"\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Nome\"\n          value={ name }\n          onChange={ this.handleChange }\n        />\n        <input\n          data-testid=\"input-gravatar-email\"\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Email\"\n          value={ email }\n          onChange={ this.handleChange }\n        />\n        <button\n          type=\"submit\"\n          data-testid=\"btn-play\"\n          disabled={ name.length < 1 || email.length < 1 }\n        >\n          Jogar\n        </button>\n\n        <Link to=\"/settings\">\n          <button\n            type=\"button\"\n            data-testid=\"btn-settings\"\n          >\n            Configurações\n          </button>\n        </Link>\n      </form>\n    );\n  }\n}\n\n// const mapStateToProps = (state) => ({\n\n// });\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchLogin: (userInfo) => dispatch(getToken(userInfo)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n\nLogin.propTypes = {\n  dispatchLogin: PropTypes.func.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}